<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>36 Valid Sudoku</title>
    <link href="/seawaterfoods/2021/01/08/LeetCode-36/"/>
    <url>/seawaterfoods/2021/01/08/LeetCode-36/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/36.jpg"></p><h3 id="題目-36-Valid-Sudoku"><a href="#題目-36-Valid-Sudoku" class="headerlink" title="題目 36: Valid Sudoku"></a>題目 36: Valid Sudoku</h3><p>確認9 x 9數獨板是否有效，只有有值的網格需要使用以下規則進行驗證：</p><ol><li>每行必須包含數字1-9，且不能重複。</li><li>每列必須包含數字1-9，且不能重複。</li><li>網格的9個3 x 3子框中的每個必須包含數字1-9，且不能重複。<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidSudoku</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br><span class="hljs-comment">//            檢查Row</span><br>            <span class="hljs-keyword">if</span> (!validateRow(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//            檢查Col</span><br>            <span class="hljs-keyword">if</span> (!validateCol(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br><span class="hljs-comment">//            檢查Box</span><br>            <span class="hljs-keyword">if</span> (!validateBox(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateRow</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-comment">//        準備使用位移計算元紀錄有無重複數字</span><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[r][i];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + r + &quot;][&quot; + i + &quot;]:&quot; + ch);</span><br><span class="hljs-comment">//            排除字元為&#x27;.&#x27;</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = checkChar(ch, seen);<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateCol</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[i][c];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + i + &quot;][&quot; + c + &quot;]:&quot; + ch);</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = checkChar(ch, seen);<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateBox</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> a)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[i / <span class="hljs-number">3</span> + (a / <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>][i % <span class="hljs-number">3</span> + (a % <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + (i / 3 + (a / 3) * 3) + &quot;][&quot; + (i % 3 + (a % 3) * 3) + &quot;]:&quot; + ch);</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = seen ^ (<span class="hljs-number">1</span> &lt;&lt; (ch - <span class="hljs-string">&#x27;0&#x27;</span>));<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">checkChar</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch, <span class="hljs-keyword">int</span> seen)</span> </span>&#123;<br><span class="hljs-comment">//            查看ch的數字</span><br>        <span class="hljs-keyword">int</span> charNum = (ch - <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-comment">//            紀錄二制進的位數　ex: 如果此char為3 那將1往往左移動3位數: 1 -&gt; 1000;若為9則移動9位數:1 -&gt; 1000000000</span><br>        <span class="hljs-keyword">int</span> thornsOfTwo = <span class="hljs-number">1</span> &lt;&lt; charNum;<br><span class="hljs-comment">//            以二制進互斥檢查有無重複數字，前兩次為3跟9則seen會為1000001000，然後再新增3計算後會為1000000000(indicator)</span><br>        <span class="hljs-keyword">int</span> indicator = seen ^ thornsOfTwo;<br><span class="hljs-comment">//            如果未重複的狀況下seen永遠會小於indicator，若有重複則會因為互斥導致indicator會小於seen;</span><br>        <span class="hljs-keyword">return</span> indicator;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abstract Class vs Interface</title>
    <link href="/seawaterfoods/2021/01/07/AbstractAndInterfaceDifference/"/>
    <url>/seawaterfoods/2021/01/07/AbstractAndInterfaceDifference/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/interface-vs-abstract-class-java.jpg"></p><p>在初學java時常搞混抽象類別(Abstract Class)跟介面(Interface)，在這以簡易表格呈現兩者之間的區別。</p><a id="more"></a><h3 id="Abstract-Class-vs-Interface"><a href="#Abstract-Class-vs-Interface" class="headerlink" title="Abstract Class vs Interface"></a>Abstract Class vs Interface</h3><table><thead><tr><th align="center"></th><th align="center">抽象類別 Abstract Class</th><th align="center">介面 Interface</th></tr></thead><tbody><tr><td align="center">聲明</td><td align="center">public abstract class XXX</td><td align="center">public interface OOO</td></tr><tr><td align="center">能否直接使用new來產生實體</td><td align="center">不能</td><td align="center">不能</td></tr><tr><td align="center">繼承/實作數量</td><td align="center">只能使用extends單一繼承</td><td align="center">可以implements實作多個介面</td></tr><tr><td align="center">能否有建構子</td><td align="center">可以</td><td align="center">不能</td></tr><tr><td align="center">訪問修飾符</td><td align="center">與正常class無異</td><td align="center">僅可使用public</td></tr><tr><td align="center">新增方法</td><td align="center">當父類別建立新方法時，子類別無須實作父類別的新方法</td><td align="center">當父類別建立新方法時，子類別一定要實作父類別的新方法</td></tr><tr><td align="center">設計理念</td><td align="center">表示”is-a”的關係</td><td align="center">表示”like-a”的關係</td></tr></tbody></table><h3 id="舉些栗子"><a href="#舉些栗子" class="headerlink" title="舉些栗子"></a>舉些栗子</h3><ol><li>Abstract Class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;魔法攻擊&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Interface<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span></span>;  <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Swimmer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 預設就是public abstract</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Traveler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Swimmer</span>, <span class="hljs-title">Rider</span> </span>&#123;<br><span class="hljs-comment">//   一定要將interface中的方法實做出來，不然會編譯失敗</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;駕駛馬車&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自由式&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>當然可以同時應用抽象類別跟介面。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwordsMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Swimmer</span>, <span class="hljs-title">Rider</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;揮劍攻擊&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;騎馬&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蛙式&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RPGTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SwordsMan swordsMan = <span class="hljs-keyword">new</span> SwordsMan();<br>        swordsMan.setName(<span class="hljs-string">&quot;Justin&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;swordsMan :&quot;</span>+swordsMan.getName+<span class="hljs-string">&quot; 會 &quot;</span>);<br>        swordsMan.fight();<br>        swordsMan.ride();<br>        swordsMan.swim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基礎</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34 Find First and Last Position of Element in Sorted Array</title>
    <link href="/seawaterfoods/2021/01/07/LeetCode-34/"/>
    <url>/seawaterfoods/2021/01/07/LeetCode-34/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/34.jpg"></p><h3 id="題目-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#題目-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="題目 34: Find First and Last Position of Element in Sorted Array"></a>題目 34: Find First and Last Position of Element in Sorted Array</h3><p>給定一個以升序排列的整數nums數組，找到給定目標值的開始和結束位置。</p><p>如果在數組中未找到目標，則返回[-1，-1]。</p><p>後續：如果可以的話，請寫出運行時間複雜度為O（log n）的算法。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>       <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>       &#125;<br>        <br>       <span class="hljs-keyword">int</span> start, end, mid;<br>       <span class="hljs-keyword">int</span>[] bound = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>]; <br>        <br>       <span class="hljs-comment">// 開始搜尋最開始的target位置</span><br>       start = <span class="hljs-number">0</span>; <br>       end = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>            mid = start + (end - start) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt;= target) &#123;<br>                end = mid;<br>            &#125; <span class="hljs-keyword">else</span>  &#123;<br>                start = mid + <span class="hljs-number">1</span>;<br>            &#125; <br>       &#125;<br>       bound[<span class="hljs-number">0</span>]=start;<br>        <br>       <span class="hljs-comment">// 開始搜尋結束的target位置</span><br>       start = <span class="hljs-number">0</span>;<br>       end = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (start + <span class="hljs-number">1</span> &lt; end) &#123;<br>           mid = start + (end - start) / <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span> (nums[mid] &lt;= target) &#123;<br>               start = mid;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               end = mid;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (nums[end] == target) &#123;<br>           bound[<span class="hljs-number">1</span>] = end;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[start] == target) &#123;<br>           bound[<span class="hljs-number">1</span>] = start;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//             如果都沒有的話回傳[-1,-1]</span><br>           bound[<span class="hljs-number">0</span>] = bound[<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">return</span> bound;<br>       &#125;<br>        <br>       <span class="hljs-keyword">return</span> bound;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24 Swap Nodes in Pairs</title>
    <link href="/seawaterfoods/2021/01/06/LeetCode-24/"/>
    <url>/seawaterfoods/2021/01/06/LeetCode-24/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/24.jpg"></p><h3 id="題目-24-Swap-Nodes-in-Pairs"><a href="#題目-24-Swap-Nodes-in-Pairs" class="headerlink" title="題目 24: Swap Nodes in Pairs"></a>題目 24: Swap Nodes in Pairs</h3><p>給定一個 linked list，每隔兩個相鄰node交換一次並返回其linked list。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode body = head;<br>        <span class="hljs-keyword">while</span> (body != <span class="hljs-keyword">null</span> &amp;&amp; body.next != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> temp = body.val;<br>            body.val = body.next.val;<br>            body.next.val = temp;<br>            body = body.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23 Merge k Sorted Lists</title>
    <link href="/seawaterfoods/2021/01/05/LeetCode-23/"/>
    <url>/seawaterfoods/2021/01/05/LeetCode-23/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/23.jpg"></p><h3 id="題目-23-Merge-k-Sorted-Lists"><a href="#題目-23-Merge-k-Sorted-Lists" class="headerlink" title="題目 23: Merge k Sorted Lists"></a>題目 23: Merge k Sorted Lists</h3><p>給一個由k個linked-lists組成的數組，每個linked-lists以升序排列。 將所有linked-lists合併到一個排序的linked-lists中後回傳。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; temp1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//將題目中數組所有ListNode的值塞入ArrayList中</span><br>        <span class="hljs-keyword">for</span>(ListNode listNode:lists)&#123;<br>            <span class="hljs-keyword">while</span>(listNode!=<span class="hljs-keyword">null</span>)&#123;<br>                temp1.add(listNode.val);<br>                listNode=listNode.next;<br>            &#125;<br>        &#125;<br>        ListNode ans = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode temp2 = ans;<br>        Integer[] list1 = <span class="hljs-keyword">new</span> Integer[temp1.size()];<br>        list1 = temp1.toArray(list1);<br>        <span class="hljs-comment">//排序</span><br>        Integer[] list2 = shellSort(list1);<br>        <br>        <span class="hljs-keyword">if</span>(temp1.size()!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//將list的值一一塞入temp2中</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;list2.length;i++)&#123;<br>                temp2.val=list2[i];<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;list2.length)&#123;<br>                    temp2.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>                    temp2 = temp2.next;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遞減增量排序演算法 (O(n log2 n)):</span><br><span class="hljs-comment">     * Shell首先將間隔設為n/2，然後跳躍進行插入排序，</span><br><span class="hljs-comment">     * 再來將間隔設為n/4，跳躍進行排序動作，</span><br><span class="hljs-comment">     * 再來間隔設定為n/8、n/16，直到間隔為1的最後一次排序終止，</span><br><span class="hljs-comment">     * 由於上一次排序動作都會將固定間隔的元素排好，</span><br><span class="hljs-comment">     * 所以間隔越來越小時，某些元素位於正確位置的機率越高，</span><br><span class="hljs-comment">     * 因此最後幾次排序次數將可以大幅減低。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> needSort</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer[] shellSort(Integer[] needSort) &#123;<br>        Integer[] ans = needSort;<br>        <span class="hljs-keyword">int</span> increment = ans.length;<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">//            增量序列(間距值)</span><br>            increment = increment / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (i = increment; i &lt; ans.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (ans[i] &lt; ans[i - increment]) &#123;<br><span class="hljs-comment">//                    需要將ans[i]插入有序增量子表</span><br>                    <span class="hljs-keyword">int</span> temp = ans[i];<br>                    <span class="hljs-keyword">for</span> (j = i - increment; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; ans[j]; j -= increment) &#123;<br><span class="hljs-comment">//                       數組往後移，查找插入位置</span><br>                        ans[j + increment] = ans[j];<br>                    &#125;<br>                    ans[j + increment] = temp;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (increment &gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11 Container With Most Water</title>
    <link href="/seawaterfoods/2021/01/05/LeetCode-11/"/>
    <url>/seawaterfoods/2021/01/05/LeetCode-11/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/11.jpg"></p><h3 id="題目-11-Container-With-Most-Water"><a href="#題目-11-Container-With-Most-Water" class="headerlink" title="題目 11: Container With Most Water"></a>題目 11: Container With Most Water</h3><p>給定n個非負整數a1, a2, …, an，其中每個代表坐標(i, ai)上的一個點。 繪製n條垂直線，使線i的兩個端點位於 (i, ai) 和 (i, 0)。 <br/><br>找兩條線，它們與x軸一起形成一個容器，以便該容器包含最多的水。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//取最左邊的線與最右邊的線。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>,right = height.length-<span class="hljs-number">1</span>;left&lt;right;)&#123;<br>            <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> width = right-left;<br>            <br>            <span class="hljs-comment">//左右邊線相互比較後，以較小邊為高再與寬相乘得面積，之後將較小邊往對邊前進一位。</span><br>            <span class="hljs-keyword">if</span>(height[left]&gt;height[right])&#123;<br>                area = width*height[right];<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                area = width*height[left];<br>                left++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ans&lt;area)<br>                ans=area;<br>           &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/11_ContainerWithMostWater.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2 Add Two Numbers</title>
    <link href="/seawaterfoods/2021/01/04/LeetCode-2/"/>
    <url>/seawaterfoods/2021/01/04/LeetCode-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/2.jpg"></p><h3 id="題目-2-Add-Two-Numbers"><a href="#題目-2-Add-Two-Numbers" class="headerlink" title="題目 2: Add Two Numbers"></a>題目 2: Add Two Numbers</h3><p>此題目為兩個non-empty linked lists，它們代表兩個非負整數。<br/><br>這些數字以相反的順序儲存在兩條linked list中的nodes。<br/><br>將兩個數字相加後每一位數以相反的順序儲存在新的linked lists中返回。</p><a id="more"></a><p>EX1:如圖<br/>{2,4,3}->342 & {5,6,4}->465<br/>342+465 = 807<br/>807 -> {7,0,8}</p><p>EX2:<br/>{9,9,9,9,9,9,9}->9999999 & {9,9,9,9}->9999<br/>9999999+9999 = 10009998<br/>10009998 -> {8,9,9,9,0,0,0,1}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode output = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        output.val = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//因為ListNode是Linked list所以必須利用java的參考(將物件的記憶體位址設定給參考名稱)refoutput將參考output</span><br>        ListNode refoutput = output;<br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//將l1&amp;l2非null的值加到refoutput值中</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>)<br>                refoutput.val += l1.val;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>)<br>                refoutput.val += l2.val;<br><br>            <span class="hljs-comment">//如果有進位，則建立值為1的下一個node</span><br>            <span class="hljs-keyword">if</span> (refoutput.val &gt;= <span class="hljs-number">10</span>) &#123;<br>                refoutput.val -= <span class="hljs-number">10</span>;<br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果沒有進位，則建立值為0的下一個node</span><br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125;<br>            <span class="hljs-comment">//查看l1&amp;l2是否為null，若非null則將l1.next或l2.next指派到當前node</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>)<br>                l1 = l1.next;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>)<br>                l2 = l2.next;<br>            <span class="hljs-comment">//如果l1&amp;l2為null且refoutput下一個node的值為0，則將refoutput下一個node設為null</span><br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span> &amp;&amp; l2 == <span class="hljs-keyword">null</span> &amp;&amp; refoutput.next.val == <span class="hljs-number">0</span>)<br>                refoutput.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">//將refoutput指派為refoutput下一個node</span><br>            refoutput = refoutput.next;<br>        &#125;<br>        <span class="hljs-comment">//因為refoutput參考output所以直接將output回傳即可。</span><br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/2_AddTwoNumbers.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub，快速建立靜態Blog並且帶著到處趴趴走。</title>
    <link href="/seawaterfoods/2020/12/29/Hexo-MyConfig/"/>
    <url>/seawaterfoods/2020/12/29/Hexo-MyConfig/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/hexo-cover.png"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在剛轉職當工程師時一直想建立Blog來記錄學習的點點滴滴，但老實說對於如何設計畫面實在是沒有美感，而且還有維護更新等等問題，所以乾脆去找了許多可以快速建立Blog方法、框架，最後選擇快速又方便的Hexo+GitHub，<br>但Hexo內建的發布功能僅能單純上傳靜態網頁部分，為了方便在不同電腦更新自己Blog，在這裡分享如何設定與基本安裝方法。</p></blockquote><a id="more"></a><h3 id="安裝與建置"><a href="#安裝與建置" class="headerlink" title="安裝與建置"></a>安裝與建置</h3><blockquote><p>由於Hexo是基於Node.js開發的Blog框架，沒安裝Node.js(Node.js 版本需不低於8.10，建議使用 Node.js 10.0 及以上版本)<br>可以直接去<a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a>下載一個LTS的版本就可以了。<br><br/><br><img src="/seawaterfoods/img/nodejs.png"><br><br/><br>當然還需要有安裝<a href="https://git-scm.com/,%22Git%22">Git</a>。<br>安裝好兩個必要軟體後就可以直接使用NPM來安裝Hexo。</p></blockquote><p><strong>1. 安裝 Hexo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>如果安裝完成便可以直接輸入指令來查詢Hexo版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo version<br></code></pre></td></tr></table></figure><p><strong>2. 初始化Blog</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo init yourname.github.io        <span class="hljs-comment"># 初始化 blog，由於要使用到GitHub Page，所以建議命名&#x27;你的githubID&#x27;.github.io</span><br><span class="hljs-keyword">cd</span> yourname.github.io               <span class="hljs-comment"># 移動到剛創建的 blog 資料夾裡</span><br>npm install                         <span class="hljs-comment"># 安裝相關套件</span><br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/hexoinit.png"><br><strong>3. 設定_config.yml</strong></p><p>為了可以在不同電腦更新Blog所以不去使用Hexo內建的deploy功能，但為了要顯示靜態網頁部分需要額外設定一些參數，使github可以抓到靜態網頁。</p><p><img src="/seawaterfoods/img/hexo-myconfig.png"></p><p><strong>4. 設置跳轉頁面</strong></p><p>在blog資料夾中建立index.html，設置跳轉到首頁的html。<br/>也可以順便建立Blog的404頁面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0;url=/yourname/&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/returnindex.png"><br><strong>5. Hexo Blog上傳GitHub</strong></p><p>建立Repositories。</p><p><img src="/seawaterfoods/img/githubpage.png"><br><br/><br>直接上傳到github。<br><br/><br><strong>PS:需配置好認證祕鑰–保證本地和遠端建立安全連線。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init                                                                #建立數據庫<br>git add *                                                               #把資料夾內所有檔案列為tracked對象<br>git commit -m &#x27;hexo&#x27;                                                    #提交版本<br>git remote add origin git@github.com:yourname/yourname.github.io.git    #設定遠端節點<br>git push -u origin master                                               #把本地端(master)Push到遠端(origin)<br></code></pre></td></tr></table></figure><p>或是使用各種GUI界面來管理版本控制內容的軟體來Push到GitHub上。</p><h3 id="在其他電腦更新Hexo-Blog"><a href="#在其他電腦更新Hexo-Blog" class="headerlink" title="在其他電腦更新Hexo Blog"></a>在其他電腦更新Hexo Blog</h3><p>在其他電腦下載好自己的Hexo Blog專案後，在專案資料夾直接安裝npm套件即可使用hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g             # 安裝Hexo Command Line Interface 命令列介面。<br>npm install                         # 安裝相關套件<br></code></pre></td></tr></table></figure><p>PS: Node.js跟Git別忘了安裝。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>Hexo內建的發布功能只會將靜態網頁資料夾(public)上傳到github上，但為了在不同電腦中都可以上傳Blog所以稍微研究一下(汗)；<br/>其他Hexo操作像是建立新頁面之類的方法，可以參考官方網站及其他Hexo教學文，這裡把URL放在下方參考資料中。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><blockquote><p><a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a><br/><br><a href="https://blackmaple.me/hexo-tutorial/," title="blackmaple">Hexo+GitHub，新手也可以快速建立部落格</a><br/><br><a href="https://markdown.tw/#autoescape," title="Markdown">Markdown文件(.md寫法)</a><br/><br><a href="https://augustushsu.github.io/2019/12/09/hexo-00/," title="augustushsu">hexo系列-00 hexo簡介＆環境安裝</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1365 How Many Numbers Are Smaller Than the Current Number</title>
    <link href="/seawaterfoods/2020/12/24/LeetCode-1365/"/>
    <url>/seawaterfoods/2020/12/24/LeetCode-1365/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1365.jpg"></p><h3 id="題目-1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number"><a href="#題目-1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number" class="headerlink" title="題目 1365: How Many Numbers Are Smaller Than the Current Number"></a>題目 1365: How Many Numbers Are Smaller Than the Current Number</h3><p>給定數組nums，在每個nums[i]找出數組中比其小的數字後記錄下來，並且以數組形式return。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] smallerNumbersThanCurrent(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-comment">//2 &lt;= nums.length &lt;= 500</span><br>        <span class="hljs-comment">//0 &lt;= nums[i] &lt;= 100</span><br>        <br>        <span class="hljs-keyword">int</span>[] cts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">101</span>];<br>        <span class="hljs-comment">//因為int[]中每個數字最多為100，所以設置一個int[101] (cts)的數組。</span><br>        <br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>                    cts[num]++;<br>                &#125;<br>        <span class="hljs-comment">//將nums中每個數依大小，將cts數組的特定位數++</span><br>        <span class="hljs-comment">//EX: if num=10,15,15,30 then cts[10]++, cts[15]++, cts[15]++, cts[30]++,</span><br>        <br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//設置sum為0</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> temp = cts[i];<br>        <span class="hljs-comment">//暫存每個數組中的數，依前例， cts[10]:temp=1, cts[15]:temp=2, cts[30]:temp=1</span><br>            cts[i] = sum;<br>            <span class="hljs-comment">//將前面有的數相加。</span><br>            <span class="hljs-comment">//EX: cts[10]=0, cts[11]=1... cts[15]=1 cts[16]=1... cts[30]=4..cts[100]=4</span><br>            sum += temp;<br>            <span class="hljs-comment">//這裡將sum加上temp</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            nums[i] = cts[nums[i]];<br>             <span class="hljs-comment">//將數組nums[i]輸入數組cts[nums[i]]的數</span><br>             <span class="hljs-comment">//EX:nums[0]=10-&gt;cts[10]=0-&gt;將0指派給nums[0]-&gt;nums[0]=0</span><br>             <span class="hljs-comment">//EX:nums[1]=15-&gt;cts[15]=1-&gt;將1指派給nums[1]-&gt;nums[1]=1</span><br>             <span class="hljs-comment">//EX:nums[2]=15-&gt;cts[15]=1-&gt;將1指派給nums[2]-&gt;nums[2]=1</span><br>             <span class="hljs-comment">//EX:nums[3]=30-&gt;cts[20]=3-&gt;將3指派給nums[3]-&gt;nums[3]=3</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ANS:[0,1,1,3]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1290 Convert Binary Number in a Linked List to Integer</title>
    <link href="/seawaterfoods/2020/12/24/LeetCode-1290/"/>
    <url>/seawaterfoods/2020/12/24/LeetCode-1290/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1290.jpg"></p><h3 id="題目-1290-Convert-Binary-Number-in-a-Linked-List-to-Integer"><a href="#題目-1290-Convert-Binary-Number-in-a-Linked-List-to-Integer" class="headerlink" title="題目 1290: Convert Binary Number in a Linked List to Integer"></a>題目 1290: Convert Binary Number in a Linked List to Integer</h3><p>此題目中每個ListNode中只會有0 or 1，這題要求出由01組成的二制進以右至左轉成十制進。</p><a id="more"></a><h3 id="以下是用while的作法"><a href="#以下是用while的作法" class="headerlink" title="以下是用while的作法"></a>以下是用while的作法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDecimalValue</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//設置decimal為最終回覆十制進的ANS</span><br>    <span class="hljs-keyword">int</span> decimal = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//於reverse將head的ListNode轉製成由後至前的節點EX:將[1,0,0]-&gt;[0,0,1]</span><br>    head = reverse(head);<br>    <br>    <span class="hljs-comment">//設置index為2的次方數</span><br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//使用while迴圈來判斷當前head中是否為null</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//將2^index*當前node的val取值加至decimal</span><br>        decimal += (Math.pow(<span class="hljs-number">2</span>, index) * head.val);<br>        <span class="hljs-comment">//讓head推至下一個node</span><br>        head = head.next;<br>        index ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> decimal;<br>&#125;<br><span class="hljs-comment">//reverse的轉製方式</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br><span class="hljs-comment">//前一個Node</span><br>        ListNode prev = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">//當前Node</span><br>        ListNode cur = head;<br><span class="hljs-comment">//下一個Node</span><br>        ListNode next = <span class="hljs-keyword">null</span>;<br>        <br><span class="hljs-comment">//判斷當前Node是否為空</span><br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">//將cur.next置入next中</span><br>            next = cur.next;<br>            <br><span class="hljs-comment">//將prev置入cur.next</span><br>            cur.next = prev;<br>            <br><span class="hljs-comment">//將cur置入prev</span><br>            prev = cur;<br><br><span class="hljs-comment">//將next置入cur</span><br>            cur = next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="以下是用遞迴的作法"><a href="#以下是用遞迴的作法" class="headerlink" title="以下是用遞迴的作法"></a>以下是用遞迴的作法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans =<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDecimalValue</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head.next!=<span class="hljs-keyword">null</span>)&#123;<br>            getDecimalValue(head.next);<br>        &#125;<br>        ans += head.val*Math.pow(<span class="hljs-number">2</span>,i);<br>        i++;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java:toString小技巧</title>
    <link href="/seawaterfoods/2020/12/23/Java-toString/"/>
    <url>/seawaterfoods/2020/12/23/Java-toString/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/tips.jpg"><br>在開發Java專案時，時常會有需要查看撈出來的資料是否正確，但因為各種原因無法在class中實作或是需要常常更新toString，這時候就可以使用匿名內部類別（Anonymous inner class）直接重新定義類別的toString，方便在console中印出。</p><a id="more"></a><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> level;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> blood;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBlood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> blood;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBlood</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blood)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.blood = blood;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLevel</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> level;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLevel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> level)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwordsMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RPGTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SwordsMan swordsMan = <span class="hljs-keyword">new</span> SwordsMan()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>                String toString = <span class="hljs-string">&quot;Name : &quot;</span>+getName()+<span class="hljs-string">&quot;; Level : &quot;</span>+getLevel()+<span class="hljs-string">&quot;; Blood : &quot;</span>+getBlood();<br>             <span class="hljs-keyword">return</span> toString;<br>            &#125;<br>        &#125;;<br>        swordsMan.setName(<span class="hljs-string">&quot;Justin&quot;</span>);<br>        swordsMan.setLevel(<span class="hljs-number">1</span>);<br>        swordsMan.setBlood(<span class="hljs-number">200</span>);<br><br>        Magician magician = <span class="hljs-keyword">new</span> Magician();<br>        magician.setName(<span class="hljs-string">&quot;Monica&quot;</span>);<br>        magician.setLevel(<span class="hljs-number">1</span>);<br>        magician.setBlood(<span class="hljs-number">100</span>);<br><br>        System.out.println(swordsMan);<br>        System.out.println(magician);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">Name </span>: Justin; <span class="hljs-attribute">Level </span>: <span class="hljs-number">1</span>; <span class="hljs-attribute">Blood </span>: <span class="hljs-number">200</span><br>com.joe.basic.anonymous.entry.Magician<span class="hljs-variable">@4edde6e5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
