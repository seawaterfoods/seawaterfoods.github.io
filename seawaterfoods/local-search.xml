<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>23 Merge k Sorted Lists</title>
    <link href="/seawaterfoods/2021/01/05/leetcode-23/"/>
    <url>/seawaterfoods/2021/01/05/leetcode-23/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/23.jpg"><br>給一個由k個linked-lists組成的數組，每個linked-lists以升序排列。 將所有linked-lists合併到一個排序的linked-lists中後回傳。</p><a id="more"></a><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> ListNode mergeKLists(ListNode[] lists) &#123;<br>        ArrayList&lt;<span class="hljs-type">Integer</span>&gt; temp1 = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        //將題目中數組所有ListNode的值塞入ArrayList中<br>        <span class="hljs-keyword">for</span>(ListNode listNode:lists)&#123;<br>            <span class="hljs-keyword">while</span>(listNode!=<span class="hljs-keyword">null</span>)&#123;<br>                temp1.<span class="hljs-keyword">add</span>(listNode.val);<br>                listNode=listNode.next;<br>            &#125;<br>        &#125;<br>        ListNode ans = <span class="hljs-built_in">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode temp2 = ans;<br>        <span class="hljs-type">Integer</span>[] list1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>[temp1.size()];<br>        list1 = temp1.toArray(list1);<br>        //排序<br>        <span class="hljs-type">Integer</span>[] list2 = shellSort(list1);<br>        <br>        <span class="hljs-keyword">if</span>(temp1.size()!=<span class="hljs-number">0</span>)&#123;<br>        //將list的值一一塞入temp2中<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;list2.length;i++)&#123;<br>                temp2.val=list2[i];<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;list2.length)&#123;<br>                    temp2.next = <span class="hljs-built_in">new</span> ListNode(<span class="hljs-number">0</span>);<br>                    temp2 = temp2.next;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遞減增量排序演算法 (O(n log2 n)):</span><br><span class="hljs-comment">     * Shell首先將間隔設為n/2，然後跳躍進行插入排序，</span><br><span class="hljs-comment">     * 再來將間隔設為n/4，跳躍進行排序動作，</span><br><span class="hljs-comment">     * 再來間隔設定為n/8、n/16，直到間隔為1的最後一次排序終止，</span><br><span class="hljs-comment">     * 由於上一次排序動作都會將固定間隔的元素排好，</span><br><span class="hljs-comment">     * 所以間隔越來越小時，某些元素位於正確位置的機率越高，</span><br><span class="hljs-comment">     * 因此最後幾次排序次數將可以大幅減低。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param needSort</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    private static <span class="hljs-type">Integer</span>[] shellSort(<span class="hljs-type">Integer</span>[] needSort) &#123;<br>        <span class="hljs-type">Integer</span>[] ans = needSort;<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">increment</span> = ans.length;<br>        int i,j;<br>        do &#123;<br>//            增量序列(間距值)<br>            <span class="hljs-keyword">increment</span> = <span class="hljs-keyword">increment</span> / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-keyword">increment</span>; i &lt; ans.length; i++) &#123;<br>                if (ans[i] &lt; ans[i - <span class="hljs-keyword">increment</span>]) &#123;<br>//                    需要將ans[i]插入有序增量子表<br>                    int temp = ans[i];<br>                    for (j = i - <span class="hljs-keyword">increment</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">temp</span> &lt; ans[j]; j -= <span class="hljs-keyword">increment</span>) &#123;<br>//                       數組往後移，查找插入位置<br>                        ans[j + <span class="hljs-keyword">increment</span>] = ans[j];<br>                    &#125;<br>                    ans[j + <span class="hljs-keyword">increment</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125; while (<span class="hljs-keyword">increment</span> &gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11 Container With Most Water</title>
    <link href="/seawaterfoods/2021/01/05/leetcode-11/"/>
    <url>/seawaterfoods/2021/01/05/leetcode-11/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/11.jpg"><br>給定n個非負整數a1, a2, …, an，其中每個代表坐標(i, ai)上的一個點。 繪製n條垂直線，使線i的兩個端點位於 (i, ai) 和 (i, 0)。 <br/><br>找兩條線，它們與x軸一起形成一個容器，以便該容器包含最多的水。</p><a id="more"></a><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] <span class="hljs-built_in">height</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//取最左邊的線與最右邊的線。</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>,right = <span class="hljs-built_in">height</span>.length<span class="hljs-number">-1</span>;left&lt;right;)&#123;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> <span class="hljs-built_in">width</span> = right-left;<br>        <br>        <span class="hljs-comment">//左右邊線相互比較後，以較小邊為高再與寬相乘得面積，之後將較小邊往對邊前進一位。</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">height</span>[left]&gt;<span class="hljs-built_in">height</span>[right])&#123;<br>            area = <span class="hljs-built_in">width</span>*<span class="hljs-built_in">height</span>[right];<br>            right--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            area = <span class="hljs-built_in">width</span>*<span class="hljs-built_in">height</span>[left];<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans&lt;area)<br>            ans=area;<br>       &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/11_ContainerWithMostWater.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2 Add Two Numbers</title>
    <link href="/seawaterfoods/2021/01/04/leetcode-2/"/>
    <url>/seawaterfoods/2021/01/04/leetcode-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/2.jpg"><br>此題目為兩個non-empty linked lists，它們代表兩個非負整數。<br/><br>這些數字以相反的順序儲存在兩條linked list中的nodes。<br/><br>將兩個數字相加後每一位數以相反的順序儲存在新的linked lists中返回。</p><a id="more"></a><p>EX1:如圖<br/>{2,4,3}->342 & {5,6,4}->465<br/>342+465 = 807<br/>807 -> {7,0,8}</p><p>EX2:<br/>{9,9,9,9,9,9,9}->9999999 & {9,9,9,9}->9999<br/>9999999+9999 = 10009998<br/>10009998 -> {8,9,9,9,0,0,0,1}</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> ListNode <span class="hljs-function"><span class="hljs-title">addTwoNumbers</span>(<span class="hljs-params">ListNode l1, ListNode l2</span>)</span> &#123;<br>        ListNode output = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        output.val = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//因為ListNode是Linked list所以必須利用java的參考(將物件的記憶體位址設定給參考名稱)refoutput將參考output</span><br>        ListNode refoutput = output;<br>        <br>        <span class="hljs-keyword">while</span>(l1!=<span class="hljs-literal">null</span> || l2!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//將l1&amp;l2非null的值加到refoutput值中</span><br>            <span class="hljs-keyword">if</span>(l1!= <span class="hljs-literal">null</span>)<br>                refoutput.val+=l1.val;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-literal">null</span>)<br>                refoutput.val+=l2.val;<br>            <br>            <span class="hljs-comment">//如果有進位，則建立值為1的下一個node</span><br>            <span class="hljs-keyword">if</span>(refoutput.val&gt;=<span class="hljs-number">10</span>)&#123;<br>                refoutput.val-=<span class="hljs-number">10</span>;<br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//如果沒有進位，則建立值為0的下一個node</span><br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125;<br>            <span class="hljs-comment">//查看l1&amp;l2是否為null，若非null則將l1.next或l2.next指派到當前node</span><br>            <span class="hljs-keyword">if</span>(l1!= <span class="hljs-literal">null</span>)<br>                l1=l1.next;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-literal">null</span>)<br>                l2=l2.next;<br>            <span class="hljs-comment">//如果l1&amp;l2為null且refoutput下一個node的值為0，則將refoutput下一個node設為null</span><br>            <span class="hljs-keyword">if</span>(l1==<span class="hljs-literal">null</span> &amp;&amp; l2==<span class="hljs-literal">null</span> &amp;&amp; refoutput.next.val==<span class="hljs-number">0</span>)<br>                refoutput.next=<span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//將refoutput指派為refoutput下一個node</span><br>            refoutput=refoutput.next;<br>        &#125;<br>        <span class="hljs-comment">//因為refoutput參考output所以直接將output回傳即可。</span><br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/2_AddTwoNumbers.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub，快速建立靜態Blog並且帶著到處趴趴走。</title>
    <link href="/seawaterfoods/2020/12/29/hexo-myconfig/"/>
    <url>/seawaterfoods/2020/12/29/hexo-myconfig/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/hexo-cover.png"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在剛轉職當工程師時一直想建立Blog來記錄學習的點點滴滴，但老實說對於如何設計畫面實在是沒有美感，而且還有維護更新等等問題，所以乾脆去找了許多可以快速建立Blog方法、框架，最後選擇快速又方便的Hexo+GitHub，<br>但Hexo內建的發布功能僅能單純上傳靜態網頁部分，為了方便在不同電腦更新自己Blog，在這裡分享如何設定與基本安裝方法。</p></blockquote><a id="more"></a><h3 id="安裝與建置"><a href="#安裝與建置" class="headerlink" title="安裝與建置"></a>安裝與建置</h3><blockquote><p>由於Hexo是基於Node.js開發的Blog框架，沒安裝Node.js(Node.js 版本需不低於8.10，建議使用 Node.js 10.0 及以上版本)<br>可以直接去<a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a>下載一個LTS的版本就可以了。<br><br/><br><img src="/seawaterfoods/img/nodejs.png"><br><br/><br>當然還需要有安裝<a href="https://git-scm.com/,%22Git%22">Git</a>。<br>安裝好兩個必要軟體後就可以直接使用NPM來安裝Hexo。</p></blockquote><p><strong>1. 安裝 Hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>如果安裝完成便可以直接輸入指令來查詢Hexo版本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><strong>2. 初始化Blog</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo init yourname.github.io        <span class="hljs-comment"># 初始化 blog，由於要使用到GitHub Page，所以建議命名&#x27;你的githubID&#x27;.github.io</span><br><span class="hljs-keyword">cd</span> yourname.github.io               <span class="hljs-comment"># 移動到剛創建的 blog 資料夾裡</span><br>npm install                         <span class="hljs-comment"># 安裝相關套件</span><br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/hexoinit.png"><br><strong>3. 設定_config.yml</strong></p><p>為了可以在不同電腦更新Blog所以不去使用Hexo內建的deploy功能，但為了要顯示靜態網頁部分需要額外設定一些參數，使github可以抓到靜態網頁。</p><p><img src="/seawaterfoods/img/hexo-myconfig.png"></p><p><strong>4. 設置跳轉頁面</strong></p><p>在blog資料夾中建立index.html，設置跳轉到首頁的html。<br/>也可以順便建立Blog的404頁面。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0;url=/yourname/&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/seawaterfoods/img/returnindex.png"><br><strong>5. Hexo Blog上傳GitHub</strong></p><p>建立Repositories。</p><p><img src="/seawaterfoods/img/githubpage.png"><br><br/><br>直接上傳到github。<br><br/><br><strong>PS:需配置好認證祕鑰–保證本地和遠端建立安全連線。</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git init                                                                <span class="hljs-comment">#建立數據庫</span><br>git <span class="hljs-keyword">add</span><span class="bash"> *                                                               <span class="hljs-comment">#把資料夾內所有檔案列為tracked對象</span></span><br>git commit -m <span class="hljs-string">&#x27;hexo&#x27;</span>                                                    <span class="hljs-comment">#提交版本</span><br>git remote <span class="hljs-keyword">add</span><span class="bash"> origin git@github.com:yourname/yourname.github.io.git    <span class="hljs-comment">#設定遠端節點</span></span><br>git push -u origin master                                               <span class="hljs-comment">#把本地端(master)Push到遠端(origin)</span><br></code></pre></td></tr></table></figure><p>或是使用各種GUI界面來管理版本控制內容的軟體來Push到GitHub上。</p><h3 id="在其他電腦更新Hexo-Blog"><a href="#在其他電腦更新Hexo-Blog" class="headerlink" title="在其他電腦更新Hexo Blog"></a>在其他電腦更新Hexo Blog</h3><p>在其他電腦下載好自己的Hexo Blog專案後，在專案資料夾直接安裝npm套件即可使用hexo。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-cli -g             <span class="hljs-comment"># 安裝Hexo Command Line Interface 命令列介面。</span><br>npm <span class="hljs-keyword">install</span>                         <span class="hljs-comment"># 安裝相關套件</span><br></code></pre></td></tr></table></figure><p>PS: Node.js跟Git別忘了安裝。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>Hexo內建的發布功能只會將靜態網頁資料夾(public)上傳到github上，但為了在不同電腦中都可以上傳Blog所以稍微研究一下(汗)；<br/>其他Hexo操作像是建立新頁面之類的方法，可以參考官方網站及其他Hexo教學文，這裡把URL放在下方參考資料中。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><blockquote><p><a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a><br/><br><a href="https://blackmaple.me/hexo-tutorial/," title="blackmaple">Hexo+GitHub，新手也可以快速建立部落格</a><br/><br><a href="https://markdown.tw/#autoescape," title="Markdown">Markdown文件(.md寫法)</a><br/><br><a href="https://augustushsu.github.io/2019/12/09/hexo-00/," title="augustushsu">hexo系列-00 hexo簡介＆環境安裝</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1365 How Many Numbers Are Smaller Than the Current Number</title>
    <link href="/seawaterfoods/2020/12/24/leetcode-1365/"/>
    <url>/seawaterfoods/2020/12/24/leetcode-1365/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1365.jpg"><br>給定數組nums，在每個nums[i]找出數組中比其小的數字後記錄下來，並且以數組形式return。</p><a id="more"></a><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><br>public int[] smallerNumbersThanCurrent(int[] nums) &#123;<br>    //<span class="hljs-number">2</span> &lt;= nums.length &lt;= <span class="hljs-number">500</span><br>    //<span class="hljs-number">0</span> &lt;= nums[i] &lt;= <span class="hljs-number">100</span><br>    <br>    int[] cts = new int[<span class="hljs-number">101</span>];<br>    //因為int[]中每個數字最多為<span class="hljs-number">100</span>，所以設置一個int[<span class="hljs-number">101</span>] (cts)的數組。<br>    <br>            for (int num : nums) &#123;<br>                cts[num]++;<br>            &#125;<br>    //將nums中每個數依大小，將cts數組的特定位數++<br>    //<span class="hljs-symbol">EX</span>: if num=<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">30</span> then cts[<span class="hljs-number">10</span>]++, cts[<span class="hljs-number">15</span>]++, cts[<span class="hljs-number">15</span>]++, cts[<span class="hljs-number">30</span>]++,<br>    <br>    int sum = <span class="hljs-number">0</span>;<br>    //設置sum為<span class="hljs-number">0</span><br>    <br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; i++) &#123;<br>        int temp = cts[i];<br>    //暫存每個數組中的數，依前例， cts[<span class="hljs-number">10</span>]:temp=<span class="hljs-number">1</span>, cts[<span class="hljs-number">15</span>]:temp=<span class="hljs-number">2</span>, cts[<span class="hljs-number">30</span>]:temp=<span class="hljs-number">1</span><br>        cts[i] = sum;<br>        //將前面有的數相加。<br>        //<span class="hljs-symbol">EX</span>: cts[<span class="hljs-number">10</span>]=<span class="hljs-number">0</span>, cts[<span class="hljs-number">11</span>]=<span class="hljs-number">1.</span>.. cts[<span class="hljs-number">15</span>]=<span class="hljs-number">1</span> cts[<span class="hljs-number">16</span>]=<span class="hljs-number">1.</span>.. cts[<span class="hljs-number">30</span>]=<span class="hljs-number">4.</span>.cts[<span class="hljs-number">100</span>]=<span class="hljs-number">4</span><br>        sum += temp;<br>        //這裡將sum加上temp<br>    &#125;<br>    for (int i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        nums[i] = cts[nums[i]];<br>         //將數組nums[i]輸入數組cts[nums[i]]的數<br>         //<span class="hljs-symbol">EX</span>:nums[<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>-&gt;cts[<span class="hljs-number">10</span>]=<span class="hljs-number">0</span>-&gt;將<span class="hljs-number">0</span>指派給nums[<span class="hljs-number">0</span>]-&gt;nums[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>         //<span class="hljs-symbol">EX</span>:nums[<span class="hljs-number">1</span>]=<span class="hljs-number">15</span>-&gt;cts[<span class="hljs-number">15</span>]=<span class="hljs-number">1</span>-&gt;將<span class="hljs-number">1</span>指派給nums[<span class="hljs-number">1</span>]-&gt;nums[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span><br>         //<span class="hljs-symbol">EX</span>:nums[<span class="hljs-number">2</span>]=<span class="hljs-number">15</span>-&gt;cts[<span class="hljs-number">15</span>]=<span class="hljs-number">1</span>-&gt;將<span class="hljs-number">1</span>指派給nums[<span class="hljs-number">2</span>]-&gt;nums[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span><br>         //<span class="hljs-symbol">EX</span>:nums[<span class="hljs-number">3</span>]=<span class="hljs-number">30</span>-&gt;cts[<span class="hljs-number">20</span>]=<span class="hljs-number">3</span>-&gt;將<span class="hljs-number">3</span>指派給nums[<span class="hljs-number">3</span>]-&gt;nums[<span class="hljs-number">3</span>]=<span class="hljs-number">3</span><br>    &#125;<br>    return nums;<br>&#125;<br><span class="hljs-symbol">ANS</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1290 Convert Binary Number in a Linked List to Integer</title>
    <link href="/seawaterfoods/2020/12/24/leetcode-1290/"/>
    <url>/seawaterfoods/2020/12/24/leetcode-1290/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1290.jpg"><br>此題目中每個ListNode中只會有0 or 1，這題要求出由01組成的二制進以右至左轉成十制進。</p><a id="more"></a><h3 id="以下是用while的作法"><a href="#以下是用while的作法" class="headerlink" title="以下是用while的作法"></a>以下是用while的作法</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs awk">public int getDecimalValue(ListNode head) &#123;<br>    <span class="hljs-regexp">//</span>設置decimal為最終回覆十制進的ANS<br>    int decimal = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-regexp">//</span>於reverse將head的ListNode轉製成由後至前的節點EX:將[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]-&gt;[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    head = reverse(head);<br>    <br>    <span class="hljs-regexp">//</span>設置index為<span class="hljs-number">2</span>的次方數<br>    int index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-regexp">//</span>使用<span class="hljs-keyword">while</span>迴圈來判斷當前head中是否為null<br>    <span class="hljs-keyword">while</span> (head != null) &#123;<br>        <span class="hljs-regexp">//</span>將<span class="hljs-number">2</span>^index*當前node的val取值加至decimal<br>        decimal += (Math.pow(<span class="hljs-number">2</span>, index) * head.val);<br>        <span class="hljs-regexp">//</span>讓head推至下一個node<br>        head = head.<span class="hljs-keyword">next</span>;<br>        index ++;<br>    &#125;<br>    return decimal;<br>&#125;<br><span class="hljs-regexp">//</span>reverse的轉製方式<br>private ListNode reverse(ListNode head) &#123;<br><span class="hljs-regexp">//</span>前一個Node<br>        ListNode prev = null;<br><span class="hljs-regexp">//</span>當前Node<br>        ListNode cur = head;<br><span class="hljs-regexp">//</span>下一個Node<br>        ListNode <span class="hljs-keyword">next</span> = null;<br>        <br><span class="hljs-regexp">//</span>判斷當前Node是否為空<br>        <span class="hljs-keyword">while</span> (cur != null) &#123;<br><span class="hljs-regexp">//</span>將cur.<span class="hljs-keyword">next</span>置入<span class="hljs-keyword">next</span>中<br>            <span class="hljs-keyword">next</span> = cur.<span class="hljs-keyword">next</span>;<br>            <br><span class="hljs-regexp">//</span>將prev置入cur.<span class="hljs-keyword">next</span><br>            cur.<span class="hljs-keyword">next</span> = prev;<br>            <br><span class="hljs-regexp">//</span>將cur置入prev<br>            prev = cur;<br><br><span class="hljs-regexp">//</span>將<span class="hljs-keyword">next</span>置入cur<br>            cur = <span class="hljs-keyword">next</span>;<br>        &#125;<br>        <br>        return prev;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="以下是用遞迴的作法"><a href="#以下是用遞迴的作法" class="headerlink" title="以下是用遞迴的作法"></a>以下是用遞迴的作法</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> ans =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> getDecimalValue(ListNode head) &#123;<br>        <span class="hljs-keyword">if</span>(head.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>)&#123;<br>            getDecimalValue(head.<span class="hljs-keyword">next</span>);<br>        &#125;<br>        ans += head.val*Math.pow(<span class="hljs-number">2</span>,i);<br>        i++;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java:toString小技巧</title>
    <link href="/seawaterfoods/2020/12/23/java-toString/"/>
    <url>/seawaterfoods/2020/12/23/java-toString/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/tips.jpg"><br>在開發Java專案時，時常會有需要查看撈出來的資料是否正確，但因為各種原因無法在class中實作或是需要常常更新toString，這時候就可以使用匿名內部類別（Anonymous inner class）直接重新定義類別的toString，方便在console中印出。</p><a id="more"></a><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">private</span> int level;<br>    <span class="hljs-keyword">private</span> int blood;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getBlood</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> blood;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBlood</span>(<span class="hljs-params">int blood</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.blood = blood;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getLevel</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> level;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setLevel</span>(<span class="hljs-params">int level</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwordsMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RPGTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br><br>        SwordsMan swordsMan = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">SwordsMan</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">String</span> toString = <span class="hljs-string">&quot;Name : &quot;</span>+getName()+<span class="hljs-string">&quot;; Level : &quot;</span>+getLevel()+<span class="hljs-string">&quot;; Blood : &quot;</span>+getBlood();<br>             <span class="hljs-keyword">return</span> toString;<br>            &#125;<br>        &#125;;<br>        swordsMan.setName(<span class="hljs-string">&quot;Justin&quot;</span>);<br>        swordsMan.setLevel(<span class="hljs-number">1</span>);<br>        swordsMan.setBlood(<span class="hljs-number">200</span>);<br><br>        Magician magician = <span class="hljs-keyword">new</span> Magician();<br>        magician.setName(<span class="hljs-string">&quot;Monica&quot;</span>);<br>        magician.setLevel(<span class="hljs-number">1</span>);<br>        magician.setBlood(<span class="hljs-number">100</span>);<br><br>        System.out.println(swordsMan);<br>        System.out.println(magician);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">Name : Justin; Level : 1; Blood : 200<br>com.joe.basic.anonymous.entry.Magician@4edde6e5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
