<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JUnit5學習(八)-Composed Annotations</title>
    <link href="/seawaterfoods/2021/03/04/JUnit5-8/"/>
    <url>/seawaterfoods/2021/03/04/JUnit5-8/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/CustomizeAnnotation.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JUnit5也是支持自定義註釋，可以創建自定義組成的註釋命名@Easy然後用來替代@Tag(“easy”)，甚至可以進一步採取自定義的@EasyTest，可以用來同時替代@Tag(“easy”)和@Test。</p><a id="more"></a><h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>自定義註解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><br><span class="hljs-meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Tag(&quot;hard&quot;)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> HardTest &#123;<br>&#125;<br><br><span class="hljs-meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Tag(&quot;easy&quot;)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EasyTest &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>實際應用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> customizeAnnotation.EasyTest;<br><span class="hljs-keyword">import</span> customizeAnnotation.HardTest;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizeAnnotationTest</span> </span>&#123;<br>    Logger log = Logger.getLogger(CustomizeAnnotationTest.class.getName());<br><br>    <span class="hljs-meta">@HardTest</span><br>    <span class="hljs-meta">@DisplayName(&quot;hard-1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">first1Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;hardTest&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-meta">@EasyTest</span><br>    <span class="hljs-meta">@DisplayName(&quot;easy-1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">second1Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;easyTest&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p>如圖:<br><img src="/seawaterfoods/img/JUnit/CustomizeAnnotationTest.png"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://rumenz.com/java-topic/junit5/expected-exception-example/index.html" title="junit5">junit5官方網站</a><br/><br><a href="https://blog.csdn.net/boling_cavalry/article/details/108914091" title="Tag &amp; DisplayName">JUnit5学习之五：标签(Tag)和自定义注解</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5學習(七)-@Tag與@DisplayName</title>
    <link href="/seawaterfoods/2021/02/17/JUnit5-7/"/>
    <url>/seawaterfoods/2021/02/17/JUnit5-7/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/Tags.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>可以通過@Tag註釋來標記測試類和方法。 這些標籤以後可以用來過濾測試執行。</p><a id="more"></a><p>Tag語法規則:<br>Tag不能為null或為空。<br>一個trimmed tag不能包含空格。<br>一個trimmed tag不得包含ISO控制字符。<br>一個trimmed tag不得包含以下任何保留字符。</p><blockquote><p>,：逗號<br>(：左括號<br>)：右括號<br>&amp;：連字號<br>|：豎線<br>!：感嘆號</p></blockquote><ol><li>可以在測試class或測試method(或兩者同時)使用@Tag。</li><li>也可以在單一測試method中應用多個tag。</li></ol><table><thead><tr><th>註解</th><th>描述</th></tr></thead><tbody><tr><td>@Tag</td><td>可用於從測試計劃中過濾測試用例。它可以幫助針對不同的環境，不同的用例或任何特定要求創建多個不同的測試計劃。您可以通過僅在測試計劃中包括那些標記的測試或通過從測試計劃中排除其他測試來執行測試集。</td></tr><tr><td>@Tags</td><td>可用於添加多個@Tag在其中。</td></tr><tr><td>@DisplayName</td><td>用於為測試類或測試方法提供任何自定義顯示名稱。</td></tr></tbody></table><h3 id="Tag表達式"><a href="#Tag表達式" class="headerlink" title="Tag表達式"></a>Tag表達式</h3><p>在以Tag來篩選時可以編輯複雜的篩選邏輯:</p><table><thead><tr><th align="center">運算子</th><th align="center">描述</th><th align="center">舉例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">和</td><td align="center">important &amp; easy</td></tr><tr><td align="center">!</td><td align="center">非</td><td align="center">important ! easy</td></tr><tr><td align="center">|</td><td align="center">或</td><td align="center">important | easy</td></tr></tbody></table><h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//可以將Tag放置class上</span><br><span class="hljs-meta">@Tag(&quot;first&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagFirstTest</span> </span>&#123;<br>    Logger log = Logger.getLogger(TagFirstTest.class.getName());<br><br><span class="hljs-comment">//設置多個Tag時可以包在Tags中</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tags(&#123;@Tag(&quot;easy&quot;),@Tag(&quot;important&quot;)&#125;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;first-1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">first1Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;first1Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;first-2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">first2Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;first2Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;hard&quot;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;first-3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">first3Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;first3Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Tag(&quot;second&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagSecondTest</span> </span>&#123;<br>    Logger log = Logger.getLogger(TagSecondTest.class.getName());<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisplayName(&quot;second-1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">second1Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;second1Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;easy&quot;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;second-2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">second2Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;second2Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br><span class="hljs-comment">//設置多個Tag時除了可以包在Tags中之外，也可以將@Tag直接設置</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;hard&quot;)</span><br>    <span class="hljs-meta">@Tag(&quot;important&quot;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;second-3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">second3Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;second3Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//當然Tags也可以直接設置在class上</span><br><span class="hljs-meta">@Tags(&#123;@Tag(&quot;easy&quot;),@Tag(&quot;hard&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TagThirdTest</span> </span>&#123;<br>    Logger log = Logger.getLogger(TagThirdTest.class.getName());<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;important&quot;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;third-1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">third1Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;third1Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;production&quot;)</span><br>    <span class="hljs-meta">@DisplayName(&quot;third-2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">third2Test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;third2Test&quot;</span>);<br>        Assertions.assertEquals(<span class="hljs-number">2</span>, Math.addExact(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="IntelliJ-2020-3-2-自訂Tag測試執行"><a href="#IntelliJ-2020-3-2-自訂Tag測試執行" class="headerlink" title="IntelliJ(2020.3.2)自訂Tag測試執行"></a>IntelliJ(2020.3.2)自訂Tag測試執行</h2><ol><li><p>先Edit Configurations編輯設置。<br><img src="/seawaterfoods/img/JUnit/TagTestSetStep1.png"></p></li><li><p>然後建立新的JUnit配置。<br><img src="/seawaterfoods/img/JUnit/TagTestSetStep2.png"></p></li><li><p>最後選擇設置測試類型為Tags，並且在表達式中填寫過濾規則。<br><img src="/seawaterfoods/img/JUnit/TagTestSetStep3.png"></p></li></ol><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p>所有”easy”的Tag都會執行，如圖:<br><img src="/seawaterfoods/img/JUnit/TagTest.png"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://rumenz.com/java-topic/junit5/expected-exception-example/index.html" title="junit5">junit5官方網站</a><br/><br><a href="https://blog.csdn.net/boling_cavalry/article/details/108914091" title="Tag &amp; DisplayName">JUnit5学习之五：标签(Tag)和自定义注解</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(六)-按環境條件執行</title>
    <link href="/seawaterfoods/2021/02/03/JUnit5-6/"/>
    <url>/seawaterfoods/2021/02/03/JUnit5-6/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/TestConditions.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JUnit5中的允許開發人員根據特定註解用來啟用或禁用測試。<br>這種情況的最簡單示例就是上一篇的@Disabled。<br>除了@Disabled之外，JUnit5還支持其他幾個基於註解的條件，這些條件允許開發時以聲明方式啟用或禁用測試。</p><a id="more"></a><p>限制條件的Annotations:</p><table><thead><tr><th>註解</th><th>描述</th></tr></thead><tbody><tr><td>@EnabledOnOs</td><td>指定1到多個作業系統，只有在當前作業系統為其中一個系統時，測試方法才會執行。</td></tr><tr><td>@DisabledOnOs</td><td>指定1到多個作業系統，當在作業系統為其中一個系統時，測試方法不執行。</td></tr><tr><td>@EnabledOnJre</td><td>指定1到多個JRE版本，只有在當前JRE版本為其中一個版本時，測試方法才會執行。</td></tr><tr><td>@DisabledOnJre</td><td>指定1到多個JRE版本，當JRE版本為其中一個版本時，測試方法不執行。</td></tr><tr><td>@EnabledForJreRange</td><td>指定JRE版本範圍，只有當前JRE版本在範圍中時，測試方法才會執行。</td></tr><tr><td>@DisabledForJreRange</td><td>指定JRE版本範圍，當JRE版本在範圍中時，測試方法不執行。</td></tr><tr><td>@EnabledIfSystemProperty</td><td>指定系統屬性的key和期望值(可模糊搜尋)，當key為期望值時，測試方法才可以執行。</td></tr><tr><td>@DisabledIfSystemProperty</td><td>指定系統屬性的key和期望值(可模糊搜尋)，當key為期望值時，測試方法不會執行。</td></tr><tr><td>@EnabledIfEnvironmentVariable</td><td>指定環境變數的key和期望值(可模糊搜尋)，當key為期望值時，測試方法才可以執行。</td></tr><tr><td>@DisabledIfEnvironmentVariable</td><td>指定環境變數的key和期望值(可模糊搜尋)，當key為期望值時，測試方法不會執行。</td></tr><tr><td>@EnabledIf</td><td>指定一個會回傳boolean的static類型，當該static類型回傳true時，測試方法才可以執行。JUnit 5.6版本已捨棄 @EnabledIf &amp; @DisabledIf。</td></tr><tr><td>@DisabledIf</td><td>指定一個會回傳boolean的static類型，當該static類型回傳false時，測試方法才可以執行。JUnit 5.6版本已捨棄 @EnabledIf &amp; @DisabledIf。</td></tr></tbody></table><h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.condition.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConditionTest</span> </span>&#123;<br>    <span class="hljs-comment">//    當OS為WINDOWS或MAC時，測試方法才會執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnOs(&#123;OS.WINDOWS, OS.MAC&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OSEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//    當OS為MAC時，測試方法不執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledOnOs(OS.MAC)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OSNotEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Assertions.assertNotEquals(OS.MAC, System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>), <span class="hljs-string">&quot;OS is MAC!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//    當JRE版本為8 or 9，測試方法才會執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnJre(&#123;JRE.JAVA_8, JRE.JAVA_9&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JreEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//  當JRE版本為9，測試方法不執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledOnJre(JRE.JAVA_9)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JreNotEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        Assertions.assertNotEquals(JRE.JAVA_9, System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>), <span class="hljs-string">&quot;JRE is 9!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//　當前JRE版本為8~9的範圍時，測試方法才會執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledForJreRange(min = JRE.JAVA_8, max = JRE.JAVA_9)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JreRangeEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;JRE : &quot;</span> + System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//  當前JRE版本為9~11的範圍中時，測試方法不執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledForJreRange(min = JRE.JAVA_9, max = JRE.JAVA_11)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JreRangeNotEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;JRE : &quot;</span> + System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//    指定系統屬性:os.arch的期望值(可模糊搜尋)為&quot;.*64.*&quot;，測試方法才可以執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledIfSystemProperty(named = &quot;os.arch&quot;, matches = &quot;.*64.*&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">systemPropertyTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;OS arch : &quot;</span> + System.getProperty(<span class="hljs-string">&quot;os.arch&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//     指定系統屬性:java.vm.name的期望值(可模糊搜尋)為&quot;.*HotSpot.*&quot;，測試方法不會執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledIfSystemProperty(named = &quot;java.vm.name&quot;, matches = &quot;.*HotSpot.*&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">systemPropertyNotEqualsTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;java.vm.name : &quot;</span> + System.getProperty(<span class="hljs-string">&quot;java.vm.name&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//    當環境變數:JAVA_HOME的期望值(可模糊搜尋)為 &quot;.*&quot;(非NULL)，測試方法才可以執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledIfEnvironmentVariable(named = &quot;JAVA_HOME&quot;, matches = &quot;.*&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ifEnvironmentVariableHaveJAVA_HOMETest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;JAVA_HOME : &quot;</span> + System.getenv(<span class="hljs-string">&quot;USERNAME&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//    當環境變數:GOPATH的期望值(可模糊搜尋)為 &quot;.*&quot;(非NULL)，測試方法不會執行。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledIfEnvironmentVariable(named = &quot;GOPATH&quot;, matches = &quot;.*&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ifEnvironmentVariableHaveNotGOPATHTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;GOPATH : &quot;</span> + System.getenv(<span class="hljs-string">&quot;GOPATH&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//    指定trueCustomCondition的static方法，當該方法回傳true時，測試方法才可以執行。</span><br>    <span class="hljs-comment">//     JUnit 5.6版本已捨棄 @EnabledIf &amp; @DisabledIf</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledIf(&quot;trueCustomCondition&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">staticTrueMethodTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;trueCustomCondition : &quot;</span> + trueCustomCondition());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">trueCustomCondition</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//    指定falseCustomCondition的static方法，當該方法回傳false時，測試方法才可以執行。</span><br>    <span class="hljs-comment">//     JUnit 5.6版本已捨棄 @EnabledIf &amp; @DisabledIf</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@DisabledIf(&quot;falseCustomCondition&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">staticFalseMethodTest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;falseCustomCondition : &quot;</span> + falseCustomCondition());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">falseCustomCondition</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p><img src="/seawaterfoods/img/JUnit/ConditionTest.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在實際測試時常常會有因為電腦環境不同或是有程式版本區分等等原因，導致測試失敗，而這些Annotation可以很快速的篩選出可以(或不可以)執行測試，方便排除因環境因素所造成的失敗。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://rumenz.com/java-topic/junit5/expected-exception-example/index.html" title="junit5">junit5官方網站</a><br/><br><a href="https://blog.csdn.net/boling_cavalry/article/details/108909107" title="Conditional Test Execution">JUnit5学习之四：按条件执行</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(五)-測試Annotations</title>
    <link href="/seawaterfoods/2021/02/01/JUnit5-5/"/>
    <url>/seawaterfoods/2021/02/01/JUnit5-5/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/TestAnnotations.png"></p><h2 id="用於各種測試的Annotations"><a href="#用於各種測試的Annotations" class="headerlink" title="用於各種測試的Annotations"></a>用於各種測試的Annotations</h2><p>JUnit5中除了最基本的@Test可以執行測試操作，還有其他Annotation可以使用，像是@ParameterizedTest(參數化測試)或是@RepeatedTest(重複測試)…等等，在下面會伴隨著範例去了解使用方法。</p><a id="more"></a><p>測試的Annotations:  </p><table><thead><tr><th>註解</th><th>描述</th></tr></thead><tbody><tr><td>@Test</td><td>表示方法是測試方法。</td></tr><tr><td>@Disabled</td><td>禁用該測試或禁用特定某項測試方法，類似於JUnit4的@Ignore。</td></tr><tr><td>@RepeatedTest</td><td>表示方法是重複測試的測試模板。通過@RepeatedTest並指定所需的重複總數，從而提供了將測試重複指定次數的功能。每次重複測試的行為都視同@Test方法的執行。</td></tr><tr><td>@ParameterizedTest</td><td>表示方法是參數化測試。通過@ParameterizedTest並聲明至少一個source，該source將會為每次的調用提供參數，可以使用不同的參數已用了進行多次測試。</td></tr></tbody></table><h2 id="實際範例"><a href="#實際範例" class="headerlink" title="實際範例"></a>實際範例</h2><p>配置測試類別及方法，並實際測試如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.provider.*;<br><br><span class="hljs-comment">//@Disabled //如果使用@Disabled的話，這一類別都不會顯示於測試中。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotationsTest</span> </span>&#123;<br>    <span class="hljs-meta">@Disabled</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DisabledCase</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;You should not see the test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//RepeatedTest(重複次數)</span><br>    <span class="hljs-meta">@RepeatedTest(5)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">repeatedTestCase1</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Repeated Test Case1.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*RepeatedTest(value=重複次數, name=&quot;自定義顯示名稱&quot;)</span><br><span class="hljs-comment">     *  &#123;displayName&#125;:設定顯示的名稱, &#123;totalRepetitions&#125;:重複的總數, &#123;currentRepetition&#125;:當前重複的計數</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DisplayName(&quot;Repeated Test Case2&quot;)</span><br>    <span class="hljs-meta">@RepeatedTest(value = 5, name = &quot;&#123;displayName&#125; - repetition &#123;currentRepetition&#125; of &#123;totalRepetitions&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">repeatedTestCase2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Repeated Test Case2.&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*當輸入@ParameterizedTest時可以用name自訂測試名稱EX:@ParameterizedTest(name=&quot;執行序號 [&#123;index&#125;], String參數 [&#123;0&#125;],int參數 [&#123;1&#125;]&quot;)，</span><br><span class="hljs-comment">     *   之後必須使用以下的數據源註解來導入參數:</span><br><span class="hljs-comment">     *@NullSource可以調用null當一次輸入參數。</span><br><span class="hljs-comment">     *  @EmptySource可以調用空字串當一次輸入參數。(限定當參數為String)</span><br><span class="hljs-comment">     *@NullAndEmptySource可以同時調用null跟空字串當來輸入參數。(限定當參數為String)</span><br><span class="hljs-comment">     *@ValueSource可以直接輸入單一類別參數。EX:strings:String, shorts:short, bytes:byte, ints:int, longs:long, floats:float, doubles:double, chars:char, booleans:boolean, classeses:classes</span><br><span class="hljs-comment">     *@MethodSource來指定一個方法名後用該方法的回傳來輸入參數，該回傳必須為Steam類型。</span><br><span class="hljs-comment">     *@EnumSource來指定Enum當輸入參數，必須在方法的輸入參數類型中知道要調用哪個enum。EX:enum名稱為Types則在測試方法中為public void ParameterizedTest(Types type)</span><br><span class="hljs-comment">     *  @CsvSource使用Csv來當輸入參數。EX:@CsvSource(&#123;&quot;apple1, 11&quot;, &quot;banana1, 12&quot;,&quot;&#x27;lemon1, lime1&#x27;, 0x0A&quot;&#125;)</span><br><span class="hljs-comment">     *@CsvFileSource調用外部csv文件來當輸入參數，並且可以用numLinesToSkip指定跳過的行數。EX:@CsvFileSource(files = &quot;src/test/resources/two-column.csv&quot;, numLinesToSkip = 1)</span><br><span class="hljs-comment">     *@ArgumentsSource自定義參數來源 @ArgumentsSource(MyArgumentsProvider.class)。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@NullSource</span><br>    <span class="hljs-meta">@EmptySource</span><br>    <span class="hljs-meta">@ValueSource(strings = &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125; )</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ParameterizedTest</span><span class="hljs-params">(String testString)</span> </span>&#123;<br>        System.out.printf(<span class="hljs-string">&quot;Parameterized Test Basic Case. string : %s&quot;</span> ,testString);<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>實際執行結果如下:<br><img src="/seawaterfoods/img/JUnit/TestAnnotationsTest.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這上面舉例的部分都是當要調用許多重複測試的方法，比較要注意的是 @ValueSource <strong>只能</strong> 輸入單一類別的參數，當想要同時輸入多個不同參數類別的話可以多多使用 @CsvSource 以csv格式的不同欄位來實現測試需求。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests" title="junit5">junit5官方網站</a><br/><br><a href="https://rumenz.com/java-topic/junit5/repeated-test-annotation-example/index.html" title="RepeatedTest">@RepeatedTest Annotation Example</a><br/><br><a href="https://blog.csdn.net/boling_cavalry/article/details/108930987" title="ParameterizedTest Basic">JUnit5学习之六：参数化测试(Parameterized Tests)基础</a><br/><br><a href="https://blog.csdn.net/boling_cavalry/article/details/108930987" title="ParameterizedTest Advanced">JUnit5学习之七：参数化测试(Parameterized Tests)进阶</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(四)-假設</title>
    <link href="/seawaterfoods/2021/01/25/JUnit5-4/"/>
    <url>/seawaterfoods/2021/01/25/JUnit5-4/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/AssumptionsTest.jpg"></p><h2 id="假設-Assumptions"><a href="#假設-Assumptions" class="headerlink" title="假設(Assumptions)"></a>假設(Assumptions)</h2><p>在開發過程中，有時會臨時取決於某些環境條件，導致可能會使一些測試失敗。<br>例如，金流SDK功能應可在任何操作系統上使用，但當前只能在Windows上使用。<br>為了允許開發人員像上面的功能一樣運行測試code，JUnit 5向我們提供Assumptions功能。</p><a id="more"></a><h2 id="Assumptions基本方法"><a href="#Assumptions基本方法" class="headerlink" title="Assumptions基本方法"></a>Assumptions基本方法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AssumptionsTest</span> </span>&#123;<br>    Logger log =Logger.getLogger(AssumptionsTest.class.getName());<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScheduleLocaleNonUS</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// Assume that the current locale is US(假設locale是為US)</span><br>        Locale currentLocale = Locale.getDefault();<br>        Assumptions.assumeFalse(currentLocale.equals(Locale.TAIWAN), <span class="hljs-string">&quot;Locale not need to set TAIWAN!&quot;</span>);<br>        <br>        <span class="hljs-comment">// Test Calculator(跑斷言)</span><br><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        Assertions.assertEquals(expected1, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) not equal &quot;</span> + expected1);<br>        Assertions.assertNotEquals(expected2, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) equal &quot;</span> + expected2);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doScheduleLocaleNonTAIWAN</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// Assume that the current locale is TAIWAN(假設locale是為TAIWAN)</span><br>        Locale currentLocale = Locale.getDefault();<br>        Assumptions.assumeTrue(currentLocale.equals(Locale.TAIWAN), <span class="hljs-string">&quot;Locale need to set TAIWAN!&quot;</span>);<br><br>        <span class="hljs-comment">// Test Calculator (跑斷言) </span><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">4</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        Assertions.assertEquals(expected1, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) not equal &quot;</span> + expected1);<br>        Assertions.assertNotEquals(expected2, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) equal &quot;</span> + expected2);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">whenLocaleIsTAIWANLogMsgAndDoCalculator</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        如果assumingThat第一個參數為true就會執行Executable的execute方法，但是要注意assumingThat方法的特點：不拋出異常，因此其所在的方法不會被跳過，</span><br><span class="hljs-comment">//        這是和assumeTrue相比最大的區別(assumeTrue一旦參數為false就會拋出異常，其所在方法就被標記為跳過)：</span><br>        Locale currentLocale = Locale.getDefault();<br>        Assumptions.assumingThat(currentLocale.equals(Locale.TAIWAN),<br>                () -&gt; &#123;<br>                    log.info(<span class="hljs-string">&quot;當Locale是TAIWAN時才打印。&quot;</span>);<br>                &#125;<br>        );<br>        <span class="hljs-comment">// Test Calculator</span><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        Assertions.assertEquals(expected1, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) not equal &quot;</span> + expected1);<br>        Assertions.assertNotEquals(expected2, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) equal &quot;</span> + expected2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/seawaterfoods/img/JUnit/AssumptionsResult.png"></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Assumptions主要是應用在設置前置條件的情況下，當前置條件不允許時，會直接中止這段測試程式。<br>Assumptions與Assertions(斷言)最大的不同在於Assumptions時失敗是測試直接中止，而Assertions時失敗是測試結果會跑出該項失敗。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests" title="junit5">junit5官方網站</a><br/><br><a href="https://tonydeng.github.io/2017/10/09/junit-5-tutorial-introduction/" title="JUnit5-1">JUnit5教程-简介</a><br/><br><a href="https://rumenz.com/java-topic/junit5/junit-5-assumptions-examples/index.html" title="JUnit5–Assumptions">JUnit 5 Assumptions Examples</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(三)-斷言</title>
    <link href="/seawaterfoods/2021/01/21/JUnit5-3/"/>
    <url>/seawaterfoods/2021/01/21/JUnit5-3/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/AssertionsTest.jpg"></p><h2 id="斷言-Assertions"><a href="#斷言-Assertions" class="headerlink" title="斷言(Assertions)"></a>斷言(Assertions)</h2><p>斷言簡單來說就是驗證執行該程式是否為預期的效果，若是有錯誤則會fail；<br>在JUnit5除了內建於org.junit.jupiter.api之外官方也鼓勵開發者使用AssertJ，Hamcrest，Truth等第三方斷言庫。</p><a id="more"></a><h2 id="Assertions基本原則"><a href="#Assertions基本原則" class="headerlink" title="Assertions基本原則"></a>Assertions基本原則</h2><p>在撰寫單元測試的程式碼時，有個3A原則全名為：Arrange Act Assert 這三個步驟是寫單元測試的 pattern，來輔助設計測試程式，可以讓測試程式更好懂。</p><blockquote><p><strong>3A原則(Arrange、Act、Assert)</strong></p><p><strong>1. Arrange</strong>: 初始化目標物件、相依物件、方法參數、預期結果(excepted)<br><strong>2. Act</strong>: 調用目標物件及欲測試的方法<br><strong>3. Assert</strong>: 驗證結果(actual)是否符合預期    </p></blockquote><p><img src="/seawaterfoods/img/JUnit/A.jpg"></p><h3 id="實踐3A原則"><a href="#實踐3A原則" class="headerlink" title="實踐3A原則"></a>實踐3A原則</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreeATest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ThreeACase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 1. Arrange 先初始化</span><br>        AssertionCalculator calculator = <span class="hljs-keyword">new</span> AssertionCalculator();<br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> excepted = <span class="hljs-number">4</span>;<br><br>        <span class="hljs-comment">// 2. Act 調用方法</span><br>        <span class="hljs-keyword">int</span> actual = calculator.add(number1, number2);<br><br>        <span class="hljs-comment">// 3. Assert 驗證結果</span><br>        Assertions.assertEquals(actual, excepted, <span class="hljs-string">&quot;calculator.add test failed: &quot;</span>+num1+<span class="hljs-string">&quot;+&quot;</span>+num2+<span class="hljs-string">&quot;=&quot;</span>+actual+<span class="hljs-string">&quot; ,excepted: &quot;</span>+excepted);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Assertions基本方法"><a href="#Assertions基本方法" class="headerlink" title="Assertions基本方法"></a>Assertions基本方法</h2><ol><li>assertEquals() &amp; assertNotEquals() : 斷言物件(參數)是否與預期結果。    </li><li>assertTrue() &amp; assertFalse() : 斷言該boolean是否為預期結果。    </li><li>assertNull() &amp; assertNotNull() : 斷言該物件null狀態。    </li><li>assertSame() &amp; assertNotSame() : 斷言物件引用對象是否為預期結果(相同與否，類似判斷參考記憶體是否相同)。    </li><li>assertTimeout() &amp; assertTimeoutPreemptively() : 斷言是否超時。    </li><li>assertThrows() &amp; assertDoesNotThrow() : 斷言拋出錯誤正確與否或斷言沒有拋錯。    </li><li>assertArrayEquals() : 斷言Array中物件與順序是否完全一致。    </li><li>assertIterableEquals : 斷言迭代中物件與順序是否完全一致。    </li><li>assertLinesMatch : 斷言<String>列表是否完全一致。    </li><li>assertAll : 可以多重斷言，使用Java8 Lambda寫法，跟JUnit4的SoftAssert類似。    </li><li>fail : 無論斷言結果如何，都算執行斷言失敗。    </li></ol><h3 id="實踐Assertions基本方法"><a href="#實踐Assertions基本方法" class="headerlink" title="實踐Assertions基本方法"></a>實踐Assertions基本方法</h3><p>先應用上一章所講的@BeforeAll，初始化部分參數。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AssertionsTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] actualIntArr;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] expectedIntArr;<br>    <span class="hljs-keyword">static</span> List&lt;String&gt; actualStrList;<br>    <span class="hljs-keyword">static</span> List&lt;String&gt; expectedStrList;<br><br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        actualIntArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>        expectedIntArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><br>        actualStrList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        expectedStrList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        actualStrList.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        actualStrList.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        actualStrList.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        actualStrList.add(<span class="hljs-string">&quot;4&quot;</span>);<br><br>        expectedStrList.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        expectedStrList.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        expectedStrList.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        expectedStrList.add(<span class="hljs-string">&quot;4&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1-assertEquals-amp-assertNotEquals"><a href="#1-assertEquals-amp-assertNotEquals" class="headerlink" title="1. assertEquals() &amp; assertNotEquals()"></a>1. assertEquals() &amp; assertNotEquals()</h3><blockquote><ul><li>assertEquals() : 斷言物件(或基本參數)相同。</li><li>assertNotEquals() : 斷言物件(或基本參數)不同。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">objectComparisonCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertEquals(Object expected, Object actual)</span><br><span class="hljs-comment">//        public static void assertEquals(Object expected, Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertEquals(Object expected, Object actual, Supplier&lt;String&lt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertNotEquals(Object expected, Object actual)</span><br><span class="hljs-comment">//        public static void assertNotEquals(Object expected, Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertNotEquals(Object expected, Object actual, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertEquals(expected1, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) not equal &quot;</span> + expected1);<br>        <br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertNotEquals(expected2, actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) equal &quot;</span> + expected2);<br><br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="2-assertTrue-amp-assertFalse"><a href="#2-assertTrue-amp-assertFalse" class="headerlink" title="2. assertTrue() &amp; assertFalse()"></a>2. assertTrue() &amp; assertFalse()</h3><blockquote><ul><li>assertTrue() : 斷言該boolean為true。</li><li>assertFalse() : 斷言該boolean為false。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">directJudgmentCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertTrue(boolean condition)</span><br><span class="hljs-comment">//        public static void assertTrue(boolean condition, String message)</span><br><span class="hljs-comment">//        public static void assertTrue(boolean condition, Supplier&lt;String&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertTrue(BooleanSupplier booleanSupplier)</span><br><span class="hljs-comment">//        public static void assertTrue(BooleanSupplier booleanSupplier, String message)</span><br><span class="hljs-comment">//        public static void assertTrue(BooleanSupplier booleanSupplier, Supplier&lt;String&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertFalse(boolean condition)</span><br><span class="hljs-comment">//        public static void assertFalse(boolean condition, String message)</span><br><span class="hljs-comment">//        public static void assertFalse(boolean condition, Supplier&lt;String&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertFalse(BooleanSupplier booleanSupplier)</span><br><span class="hljs-comment">//        public static void assertFalse(BooleanSupplier booleanSupplier, String message)</span><br><span class="hljs-comment">//        public static void assertFalse(BooleanSupplier booleanSupplier, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertTrue(expected1 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected1 + <span class="hljs-string">&quot;is false&quot;</span>);<br><br>        <span class="hljs-comment">//the following will succeed </span><br>        Assertions.assertFalse(expected2 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected2 + <span class="hljs-string">&quot;is true&quot;</span>);<br><br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-assertNull-amp-assertNotNull"><a href="#3-assertNull-amp-assertNotNull" class="headerlink" title="3. assertNull() &amp; assertNotNull()"></a>3. assertNull() &amp; assertNotNull()</h3><blockquote><ul><li>assertNull() : 斷言該物件為Null。</li><li>assertNotNull() : 斷言該物件不為Null。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nullJudgmentCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertNotNull(Object actual)</span><br><span class="hljs-comment">//        public static void assertNotNull(Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertNotNull(Object actual, Supplier&lt;String&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertEquals(Object actual)</span><br><span class="hljs-comment">//        public static void assertEquals(Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertEquals(Object actual, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertNotNull(actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) is null&quot;</span>);<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Object nullActual = <span class="hljs-keyword">null</span>;<br>        Assertions.assertNull(nullActual, <span class="hljs-string">&quot;nullActual is not null&quot;</span>);<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="4-assertSameCase-amp-assertNotSame"><a href="#4-assertSameCase-amp-assertNotSame" class="headerlink" title="4. assertSameCase() &amp; assertNotSame()"></a>4. assertSameCase() &amp; assertNotSame()</h3><blockquote><ul><li>assertSame() : 斷言所預期引用對象的和實際引用的完全相同。</li><li>assertNotSame() : 斷言預期引用對象和實際引用不是同一對象。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertSameCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertNotSame(Object unexpected,　Object actual)</span><br><span class="hljs-comment">//        public static void assertNotSame(Object unexpected,　Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertNotSame(Object unexpected,　Object actual, Supplier&lt;&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static void assertSame(Object expected, Object actual)</span><br><span class="hljs-comment">//        public static void assertSame(Object expected, Object actual, String message)</span><br><span class="hljs-comment">//        public static void assertSameObject expected, (Object actual, Supplier&lt;String&gt; messageSupplier)</span><br><br>        List&lt;String&gt; cloneStrList = actualStrList;<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertSame(cloneStrList, actualStrList, <span class="hljs-string">&quot;actualStrList &amp; cloneStrList refer to the not same object&quot;</span>);<br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertNotSame(expectedStrList, actualStrList, <span class="hljs-string">&quot;actualStrList &amp; expectedStrList refer to the same object&quot;</span>);<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="5-assertTimeout-amp-assertTimeoutPreemptively"><a href="#5-assertTimeout-amp-assertTimeoutPreemptively" class="headerlink" title="5. assertTimeout() &amp; assertTimeoutPreemptively()"></a>5. assertTimeout() &amp; assertTimeoutPreemptively()</h3><blockquote><ul><li>assertTimeout() 和 assertTimeoutPreemptively() : 用於測試長時間運行的任務。<br>如果測試用例中的給定任務花費的時間超過指定的持續時間，則測試將失敗。<br>這兩種方法之間唯一的區別在於如果超時，assertTimeoutPreemptively()會搶先中止Executable或ThrowingSupplier。<br>而assertTimeout()，則不會終止Executable或ThrowingSupplier。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertTimeoutJudgmentCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertTimeout(Duration timeout, Executable executable)</span><br><span class="hljs-comment">//        public static void assertTimeout(Duration timeout, Executable executable, String message)</span><br><span class="hljs-comment">//        public static void assertTimeout(Duration timeout, Executable executable, Supplier&lt;String&gt; messageSupplier)</span><br>        <br>        <span class="hljs-keyword">int</span> num3;<br>        <span class="hljs-comment">//the following will succeed</span><br>        num3 = Assertions.assertTimeout(Duration.ofMinutes(<span class="hljs-number">1</span>), () -&gt; &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;, <span class="hljs-string">&quot;Timeout Duration.ofMinutes(1)&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;num3:&quot;</span>+num3);<br><br>        <span class="hljs-comment">//the following will fail 還是會return，主要用在assertAll上讓他所用到return繼續使用</span><br>        num3 = Assertions.assertTimeout(Duration.ofMillis(<span class="hljs-number">100</span>), () -&gt; &#123;<br>        Thread.sleep(<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;, <span class="hljs-string">&quot;Timeout Duration.ofMillis(100)&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;num3:&quot;</span>+num3);<br><br>        <span class="hljs-comment">//the following will fail 不會return</span><br>        num3 = Assertions.assertTimeoutPreemptively(Duration.ofMillis(<span class="hljs-number">100</span>), () -&gt; &#123;<br>        Thread.sleep(<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;, <span class="hljs-string">&quot;Timeout Duration.ofMillis(100)&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;num3:&quot;</span>+num3);<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="6-assertThrowsCase-amp-assertDoesNotThrow"><a href="#6-assertThrowsCase-amp-assertDoesNotThrow" class="headerlink" title="6. assertThrowsCase() &amp; assertDoesNotThrow()"></a>6. assertThrowsCase() &amp; assertDoesNotThrow()</h3><blockquote><ul><li>assertThrows() : 可以對方法所拋出的Exception做斷言測試，看他是不是拋出正確的Exception，如果引發的Exception與設定的Exception相同，則這一步的斷言成功並且還可以返回一個Exception。</li><li>assertDoesNotThrow() : 斷言方法不會拋出任何Exception，如果有拋Exception則為fail。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertThrowsCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static &lt;T extends Throwable&gt; T assertThrows(Class&lt;T&gt; expectedType, Executable executable)</span><br><span class="hljs-comment">//        public static &lt;T extends Throwable&gt; T assertThrows(Class&lt;T&gt; expectedType, Executable executable, String message)</span><br><span class="hljs-comment">//        public static &lt;T extends Throwable&gt; T assertThrows(Class&lt;T&gt; expectedType, Executable executable, Supplier&lt;String&gt; messageSupplier)</span><br>        <br>        <span class="hljs-comment">//the following will succeed</span><br>        Throwable exception = Assertions.assertThrows(IllegalArgumentException.class, () -&gt; &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;error message&quot;</span>);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertDoesNotThrowCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertDoesNotThrow(Executable executable)</span><br><span class="hljs-comment">//        public static void assertDoesNotThrow(Executable executable, String message)</span><br><span class="hljs-comment">//        public static void assertDoesNotThrow(Executable executable, Supplier&lt;String&gt; messageSupplier)</span><br><span class="hljs-comment">//        public static &lt;T&gt; T assertDoesNotThrow(ThrowingSupplier&lt;T&gt; supplier)</span><br><span class="hljs-comment">//        public static &lt;T&gt; T assertDoesNotThrow(ThrowingSupplier&lt;T&gt; supplier, String message)</span><br><span class="hljs-comment">//        public static &lt;T&gt; T assertDoesNotThrow(ThrowingSupplier&lt;T&gt; supplier, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertDoesNotThrow(() -&gt; methodMustNotThrow(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>), <span class="hljs-string">&quot;fail with methodMustNotThrow message: Exception&quot;</span>);<br>        <span class="hljs-comment">//the following will fail</span><br>        Assertions.assertDoesNotThrow(() -&gt; &#123;<br>            methodMustNotThrow(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>        &#125;, <span class="hljs-string">&quot;Fail: must not trow&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//    舉例用的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodMustNotThrow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> result = num1 / num2;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException(<span class="hljs-string">&quot;The numB not allowed to &#x27;0&#x27;!!&quot;</span>);<br>        &#125;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="7-arrayEqualsCase"><a href="#7-arrayEqualsCase" class="headerlink" title="7. arrayEqualsCase()"></a>7. arrayEqualsCase()</h3><blockquote><ul><li>arrayEqualsCase() : 斷言數組是否與期望數組相同。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">arrayEqualsCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertArrayEquals(int[] expected, int[] actual)</span><br><span class="hljs-comment">//        public static void assertArrayEquals(int[] expected, int[] actual, String message)</span><br><span class="hljs-comment">//        public static void assertArrayEquals(int[] expected, int[] actual, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertArrayEquals(expectedIntArr, actualIntArr, <span class="hljs-string">&quot;actualArray not Equals expectedArray.&quot;</span>);<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="8-assertIterableEquals"><a href="#8-assertIterableEquals" class="headerlink" title="8. assertIterableEquals()"></a>8. assertIterableEquals()</h3><blockquote><ul><li>assertIterableEquals() : 斷言可跌代項(Iterable)與預期完全相等(包括數量與順序)。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertIterableEqualsCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void assertIterableEquals(Iterable&lt;?&gt; expected, Iterable&gt; actual)</span><br><span class="hljs-comment">//        public static void assertIterableEquals(Iterable&lt;?&gt; expected, Iterable&gt; actual, String message)</span><br><span class="hljs-comment">//        public static void assertIterableEquals(Iterable&lt;?&gt; expected, Iterable&gt; actual, Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertIterableEquals(expectedStrList, actualStrList, <span class="hljs-string">&quot;actualStrList&#x27;s Iterable not equals expectedStrList&#x27;s Iterable.&quot;</span>);<br><br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="9-assertLinesMatch"><a href="#9-assertLinesMatch" class="headerlink" title="9. assertLinesMatch()"></a>9. assertLinesMatch()</h3><blockquote><ul><li>assertLinesMatch() : 斷言預期的String list與實際String list是否匹配。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertLinesMatchCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        1.檢查是否expected.equals(actual)如果是，則繼續下一對</span><br><span class="hljs-comment">//        2.否則將expected作為正則表達式來檢查看看，如果應用正則表達式後相等，則繼續下一對</span><br><span class="hljs-comment">//        3.否則，檢查expected行是否為fast-forward，如果適用相應地fast-forward實際行並轉到1。</span><br><br>        <span class="hljs-comment">//the following will succeed</span><br>        Assertions.assertLinesMatch(expectedStrList, actualStrList, <span class="hljs-string">&quot;fail&quot;</span>);<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="10-assertAll"><a href="#10-assertAll" class="headerlink" title="10. assertAll()"></a>10. assertAll()</h3><blockquote><ul><li>assertAll() : 多重斷言，無論所有斷言有無fail都會跑完，最後再給出所有斷言結果。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">assertAllCase</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> expected1 = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">int</span> expected2 = <span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">int</span> actual = AssertionCalculator.add(num1, num2);<br><br>    Assertions.assertAll(<br>            <span class="hljs-comment">//the following will succeed</span><br>            () -&gt; Assertions.assertTrue(expected1 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected1 + <span class="hljs-string">&quot;is false&quot;</span>),<br>    <span class="hljs-comment">//the following will fail</span><br>            () -&gt; Assertions.assertTrue(expected2 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected2 + <span class="hljs-string">&quot;is false&quot;</span>),<br>    <span class="hljs-comment">//the following will fail</span><br>            () -&gt; Assertions.assertFalse(expected1 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected1 + <span class="hljs-string">&quot;is true&quot;</span>),<br>    <span class="hljs-comment">//the following will succeed</span><br>            () -&gt; Assertions.assertFalse(expected2 == actual, <span class="hljs-string">&quot;AssertionCalculator.add(&quot;</span> + num1 + <span class="hljs-string">&quot;,&quot;</span> + num2 + <span class="hljs-string">&quot;) == &quot;</span> + expected2 + <span class="hljs-string">&quot;is true&quot;</span>)<br>    );<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="11-fail"><a href="#11-fail" class="headerlink" title="11. fail()"></a>11. fail()</h3><blockquote><ul><li>fail() : 就是直接讓測試失敗。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">failCase</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        public static void fail(String message)</span><br><span class="hljs-comment">//        public static void fail(Throwable cause)</span><br><span class="hljs-comment">//        public static void fail(String message, Throwable cause)</span><br><span class="hljs-comment">//        public static void fail(Supplier&lt;String&gt; messageSupplier)</span><br><br>        <span class="hljs-comment">//the following will fail</span><br>        Assertions.fail(<span class="hljs-string">&quot;test failed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li><p><strong>一個測試案例只測一件事!!</strong><br>在編寫Unit Test中時原則上不會在同一Test驗證多件事件，這樣才可以精準的測試出哪個地方有問題，方便辨別哪個方法錯誤，所以除非有特殊需求，不然盡量別使用assertAll()。    </p></li><li><p><strong>可以編輯斷言fail message!</strong><br>基本上在編輯@Test時，可以在斷言後自定義失敗訊息，像是assertEquals(“expected”, “actual”,”Fail”)之類的，可以在最後的參數項自訂失敗訊息。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://ithelp.ithome.com.tw/articles/10193175" title="JUnit4-3-1">第三天 AssertJ入門與用3A原則寫測試案例</a><br/><br><a href="https://ithelp.ithome.com.tw/articles/10193404" title="JUnit4-3-2">第四天 硬斷言、軟斷言、一個測試案例只測一件事</a><br/><br><a href="https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html" title="JUnit4-3-3">Class Assertions</a><br/></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(二)-時序Annotations</title>
    <link href="/seawaterfoods/2021/01/19/JUnit5-2/"/>
    <url>/seawaterfoods/2021/01/19/JUnit5-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/JUnit5.png"></p><h2 id="測試順序的Annotations"><a href="#測試順序的Annotations" class="headerlink" title="測試順序的Annotations"></a>測試順序的Annotations</h2><p>在JUnit中執行 @Test 時可以配置測試類別執行前、測試方法執行前、測試方法執行後以及測試類別執行後等等，資源事先配置與事後釋放之類用途的方法。</p><a id="more"></a><p>在下面同時列出JUnit5與JUnit4的Annotations:    </p><table><thead><tr><th>執行時機</th><th>JUnit5</th><th>JUnit4</th></tr></thead><tbody><tr><td>測試類別執行前</td><td>@BeforeAll</td><td>@BeforeClass</td></tr><tr><td>測試方法執行前</td><td>@BeforeEach</td><td>@Before</td></tr><tr><td>測試方法執行後</td><td>@AfterEach</td><td>@After</td></tr><tr><td>測試類別執行後</td><td>@AfterAll</td><td>@AfterClass</td></tr></tbody></table><h2 id="實際測試"><a href="#實際測試" class="headerlink" title="實際測試"></a>實際測試</h2><p>配置測試類別及方法，並實際測試如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SequenceTest</span> </span>&#123;<br>    <br><span class="hljs-comment">//    BeforeAll及AfterAll皆為static!</span><br>    <span class="hljs-meta">@BeforeAll</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAll</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Sequence test beforeAll.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeEach</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Sequence test beforeEach.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterEach</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Sequence test afterEach.&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterAll</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Sequence test afterAll.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">case1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Case1.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">case2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Case2.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>實際執行結果如下:<br><img src="/seawaterfoods/img/JUnit/SequenceTest.png"></p><h2 id="時序Annotation流程圖"><a href="#時序Annotation流程圖" class="headerlink" title="時序Annotation流程圖"></a>時序Annotation流程圖</h2><p>執行的時間順序可以參考下圖</p><table><thead><tr><th align="center">JUnit5</th><th align="center">JUnit4</th></tr></thead><tbody><tr><td align="center"><img src="/seawaterfoods/img/JUnit/JUnit5SequenceFlowChart.png"></td><td align="center"><img src="/seawaterfoods/img/JUnit/JUnit4SequenceFlowChart.png"></td></tr></tbody></table><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests" title="junit5">junit5官方網站</a><br/><br><a href="https://ithelp.ithome.com.tw/articles/10192896" title="JUnit4-2">第二天 JUnit生命週期/執行順序</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit5入門(一)-前言</title>
    <link href="/seawaterfoods/2021/01/18/JUnit5-1/"/>
    <url>/seawaterfoods/2021/01/18/JUnit5-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/JUnit/JUnit5.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>寫測試(Testing)在開發程式中一直是非常重要的一環，測試主要是驗證程式的正確性、完整性、安全性等等許多品質最簡單的方式 ，畢竟總不可能為了測試後端程式邏輯修改後，在前端呈現是否正確而不斷重新編譯後重啟伺服器來驗證；<br>在Java中JUnit是最為常用的測試框架，它可以做單元測試(Unit Testing)、整合測試(Integrated Testing)、系統測試(System Testing)、壓力測試(Stress Testing)、使用者接受度測試 (User Acceptance Testing) …等等；<br>而這系列文章主要是學習JUnit於2017年9月發布的JUnit5，從單元測試開始學習如何寫測試。</p><a id="more"></a><h2 id="JUnit5入門準備"><a href="#JUnit5入門準備" class="headerlink" title="JUnit5入門準備"></a>JUnit5入門準備</h2><ul><li>版本配置<blockquote><ul><li>JDK版本：1.8</li><li>IDE：Intellij IDEA 2020.3.2</li><li>maven：3.6.2    </li><li>rg.junit.jupiter:5.7.0</li></ul></blockquote></li></ul><p><img src="/seawaterfoods/img/JUnit/FolderConfiguration.png"><br><br /></p><ul><li>pom.xml<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ... --&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="建立測試範例"><a href="#建立測試範例" class="headerlink" title="建立測試範例"></a>建立測試範例</h2></li></ul><ol><li>建立測試類別<br>一般而言測試檔案會建立於專案的路徑src/test/java中分門別類整理好，那我們先直接建立一個測試類別：<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">firstTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Case1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;print Case1.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>測試程式必須為public且測試類別路徑一般與待測類別路件相同。</li></ol><ul><li>待測類別src/main/java：com/joe/basic/First.java</li><li>測試類別src/test/java：com/joe/basic/FirstTest.java</li></ul><ol start="2"><li>加入測試案例(Test Case)<br>將@Test標註在public void方法上<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Case1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;print Case1.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Case2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;print Case2.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="執行測試"><a href="#執行測試" class="headerlink" title="執行測試"></a>執行測試</h2><img src="/seawaterfoods/img/JUnit/RunFirstTest.png"><br>在Intellij中可以直接在類別上執行其中所有方法。</li></ol><p><img src="/seawaterfoods/img/JUnit/RunCase1.png"><br>或是在單一案例上測試執行</p><p><img src="/seawaterfoods/img/JUnit/FirstResult.png"><br>Run可查看所有結果。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://ithelp.ithome.com.tw/articles/10192367" title="JUnit4-1">第一天 JUnit入門</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>JUnit5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUnit5</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>36 Valid Sudoku</title>
    <link href="/seawaterfoods/2021/01/08/LeetCode-36/"/>
    <url>/seawaterfoods/2021/01/08/LeetCode-36/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/36.jpg"></p><h3 id="題目-36-Valid-Sudoku"><a href="#題目-36-Valid-Sudoku" class="headerlink" title="題目 36: Valid Sudoku"></a>題目 36: Valid Sudoku</h3><p>確認9 x 9數獨板是否有效，只有有值的網格需要使用以下規則進行驗證：</p><ol><li>每行必須包含數字1-9，且不能重複。</li><li>每列必須包含數字1-9，且不能重複。</li><li>網格的9個3 x 3子框中的每個必須包含數字1-9，且不能重複。<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidSudoku</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br><span class="hljs-comment">//            檢查Row</span><br>            <span class="hljs-keyword">if</span> (!validateRow(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//            檢查Col</span><br>            <span class="hljs-keyword">if</span> (!validateCol(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br><span class="hljs-comment">//            檢查Box</span><br>            <span class="hljs-keyword">if</span> (!validateBox(board, i)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateRow</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-comment">//        準備使用位移計算元紀錄有無重複數字</span><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[r][i];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + r + &quot;][&quot; + i + &quot;]:&quot; + ch);</span><br><span class="hljs-comment">//            排除字元為&#x27;.&#x27;</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = checkChar(ch, seen);<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateCol</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[i][c];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + i + &quot;][&quot; + c + &quot;]:&quot; + ch);</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = checkChar(ch, seen);<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateBox</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">int</span> a)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> seen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">char</span> ch = board[i / <span class="hljs-number">3</span> + (a / <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>][i % <span class="hljs-number">3</span> + (a % <span class="hljs-number">3</span>) * <span class="hljs-number">3</span>];<br><span class="hljs-comment">//            System.out.println(&quot;board[&quot; + (i / 3 + (a / 3) * 3) + &quot;][&quot; + (i % 3 + (a % 3) * 3) + &quot;]:&quot; + ch);</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> indicator = seen ^ (<span class="hljs-number">1</span> &lt;&lt; (ch - <span class="hljs-string">&#x27;0&#x27;</span>));<br>            <span class="hljs-keyword">if</span> (indicator &lt; seen) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            seen = indicator;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">checkChar</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch, <span class="hljs-keyword">int</span> seen)</span> </span>&#123;<br><span class="hljs-comment">//            查看ch的數字</span><br>        <span class="hljs-keyword">int</span> charNum = (ch - <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-comment">//            紀錄二制進的位數　ex: 如果此char為3 那將1往往左移動3位數: 1 -&gt; 1000;若為9則移動9位數:1 -&gt; 1000000000</span><br>        <span class="hljs-keyword">int</span> thornsOfTwo = <span class="hljs-number">1</span> &lt;&lt; charNum;<br><span class="hljs-comment">//            以二制進互斥檢查有無重複數字，前兩次為3跟9則seen會為1000001000，然後再新增3計算後會為1000000000(indicator)</span><br>        <span class="hljs-keyword">int</span> indicator = seen ^ thornsOfTwo;<br><span class="hljs-comment">//            如果未重複的狀況下seen永遠會小於indicator，若有重複則會因為互斥導致indicator會小於seen;</span><br>        <span class="hljs-keyword">return</span> indicator;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abstract Class vs Interface</title>
    <link href="/seawaterfoods/2021/01/07/AbstractAndInterfaceDifference/"/>
    <url>/seawaterfoods/2021/01/07/AbstractAndInterfaceDifference/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/interface-vs-abstract-class-java.jpg"></p><p>在初學java時常搞混抽象類別(Abstract Class)跟介面(Interface)，在這以簡易表格呈現兩者之間的區別。</p><a id="more"></a><h3 id="Abstract-Class-vs-Interface"><a href="#Abstract-Class-vs-Interface" class="headerlink" title="Abstract Class vs Interface"></a>Abstract Class vs Interface</h3><table><thead><tr><th align="center"></th><th align="center">抽象類別 Abstract Class</th><th align="center">介面 Interface</th></tr></thead><tbody><tr><td align="center">聲明</td><td align="center">public abstract class XXX</td><td align="center">public interface OOO</td></tr><tr><td align="center">能否直接使用new來產生實體</td><td align="center">不能</td><td align="center">不能</td></tr><tr><td align="center">繼承/實作數量</td><td align="center">只能使用extends單一繼承</td><td align="center">可以implements實作多個介面</td></tr><tr><td align="center">能否有建構子</td><td align="center">可以</td><td align="center">不能</td></tr><tr><td align="center">訪問修飾符</td><td align="center">與正常class無異</td><td align="center">僅可使用public</td></tr><tr><td align="center">新增方法</td><td align="center">當父類別建立新方法時，子類別無須實作父類別的新方法</td><td align="center">當父類別建立新方法時，子類別一定要實作父類別的新方法</td></tr><tr><td align="center">設計理念</td><td align="center">表示”is-a”的關係</td><td align="center">表示”like-a”的關係</td></tr></tbody></table><h3 id="舉些栗子"><a href="#舉些栗子" class="headerlink" title="舉些栗子"></a>舉些栗子</h3><ol><li>Abstract Class</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;魔法攻擊&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Interface<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span></span>;  <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Swimmer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 預設就是public abstract</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Traveler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Swimmer</span>, <span class="hljs-title">Rider</span> </span>&#123;<br><span class="hljs-comment">//   一定要將interface中的方法實做出來，不然會編譯失敗</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;駕駛馬車&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自由式&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>當然可以同時應用抽象類別跟介面。<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwordsMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Swimmer</span>, <span class="hljs-title">Rider</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fight</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;揮劍攻擊&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ride</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;騎馬&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;蛙式&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RPGTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SwordsMan swordsMan = <span class="hljs-keyword">new</span> SwordsMan();<br>        swordsMan.setName(<span class="hljs-string">&quot;Justin&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;swordsMan :&quot;</span>+swordsMan.getName+<span class="hljs-string">&quot; 會 &quot;</span>);<br>        swordsMan.fight();<br>        swordsMan.ride();<br>        swordsMan.swim();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>基礎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34 Find First and Last Position of Element in Sorted Array</title>
    <link href="/seawaterfoods/2021/01/07/LeetCode-34/"/>
    <url>/seawaterfoods/2021/01/07/LeetCode-34/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/34.jpg"></p><h3 id="題目-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#題目-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="題目 34: Find First and Last Position of Element in Sorted Array"></a>題目 34: Find First and Last Position of Element in Sorted Array</h3><p>給定一個以升序排列的整數nums數組，找到給定目標值的開始和結束位置。</p><p>如果在數組中未找到目標，則返回[-1，-1]。</p><p>後續：如果可以的話，請寫出運行時間複雜度為O（log n）的算法。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>       <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>       &#125;<br>        <br>       <span class="hljs-keyword">int</span> start, end, mid;<br>       <span class="hljs-keyword">int</span>[] bound = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>]; <br>        <br>       <span class="hljs-comment">// 開始搜尋最開始的target位置</span><br>       start = <span class="hljs-number">0</span>; <br>       end = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>            mid = start + (end - start) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] &gt;= target) &#123;<br>                end = mid;<br>            &#125; <span class="hljs-keyword">else</span>  &#123;<br>                start = mid + <span class="hljs-number">1</span>;<br>            &#125; <br>       &#125;<br>       bound[<span class="hljs-number">0</span>]=start;<br>        <br>       <span class="hljs-comment">// 開始搜尋結束的target位置</span><br>       start = <span class="hljs-number">0</span>;<br>       end = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (start + <span class="hljs-number">1</span> &lt; end) &#123;<br>           mid = start + (end - start) / <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span> (nums[mid] &lt;= target) &#123;<br>               start = mid;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               end = mid;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (nums[end] == target) &#123;<br>           bound[<span class="hljs-number">1</span>] = end;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[start] == target) &#123;<br>           bound[<span class="hljs-number">1</span>] = start;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//             如果都沒有的話回傳[-1,-1]</span><br>           bound[<span class="hljs-number">0</span>] = bound[<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">return</span> bound;<br>       &#125;<br>        <br>       <span class="hljs-keyword">return</span> bound;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24 Swap Nodes in Pairs</title>
    <link href="/seawaterfoods/2021/01/06/LeetCode-24/"/>
    <url>/seawaterfoods/2021/01/06/LeetCode-24/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/24.jpg"></p><h3 id="題目-24-Swap-Nodes-in-Pairs"><a href="#題目-24-Swap-Nodes-in-Pairs" class="headerlink" title="題目 24: Swap Nodes in Pairs"></a>題目 24: Swap Nodes in Pairs</h3><p>給定一個 linked list，每隔兩個相鄰node交換一次並返回其linked list。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode body = head;<br>        <span class="hljs-keyword">while</span> (body != <span class="hljs-keyword">null</span> &amp;&amp; body.next != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> temp = body.val;<br>            body.val = body.next.val;<br>            body.next.val = temp;<br>            body = body.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23 Merge k Sorted Lists</title>
    <link href="/seawaterfoods/2021/01/05/LeetCode-23/"/>
    <url>/seawaterfoods/2021/01/05/LeetCode-23/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/23.jpg"></p><h3 id="題目-23-Merge-k-Sorted-Lists"><a href="#題目-23-Merge-k-Sorted-Lists" class="headerlink" title="題目 23: Merge k Sorted Lists"></a>題目 23: Merge k Sorted Lists</h3><p>給一個由k個linked-lists組成的數組，每個linked-lists以升序排列。 將所有linked-lists合併到一個排序的linked-lists中後回傳。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; temp1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//將題目中數組所有ListNode的值塞入ArrayList中</span><br>        <span class="hljs-keyword">for</span>(ListNode listNode:lists)&#123;<br>            <span class="hljs-keyword">while</span>(listNode!=<span class="hljs-keyword">null</span>)&#123;<br>                temp1.add(listNode.val);<br>                listNode=listNode.next;<br>            &#125;<br>        &#125;<br>        ListNode ans = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode temp2 = ans;<br>        Integer[] list1 = <span class="hljs-keyword">new</span> Integer[temp1.size()];<br>        list1 = temp1.toArray(list1);<br>        <span class="hljs-comment">//排序</span><br>        Integer[] list2 = shellSort(list1);<br>        <br>        <span class="hljs-keyword">if</span>(temp1.size()!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//將list的值一一塞入temp2中</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;list2.length;i++)&#123;<br>                temp2.val=list2[i];<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;list2.length)&#123;<br>                    temp2.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>                    temp2 = temp2.next;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 遞減增量排序演算法 (O(n log2 n)):</span><br><span class="hljs-comment">     * Shell首先將間隔設為n/2，然後跳躍進行插入排序，</span><br><span class="hljs-comment">     * 再來將間隔設為n/4，跳躍進行排序動作，</span><br><span class="hljs-comment">     * 再來間隔設定為n/8、n/16，直到間隔為1的最後一次排序終止，</span><br><span class="hljs-comment">     * 由於上一次排序動作都會將固定間隔的元素排好，</span><br><span class="hljs-comment">     * 所以間隔越來越小時，某些元素位於正確位置的機率越高，</span><br><span class="hljs-comment">     * 因此最後幾次排序次數將可以大幅減低。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> needSort</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Integer[] shellSort(Integer[] needSort) &#123;<br>        Integer[] ans = needSort;<br>        <span class="hljs-keyword">int</span> increment = ans.length;<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">//            增量序列(間距值)</span><br>            increment = increment / <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (i = increment; i &lt; ans.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (ans[i] &lt; ans[i - increment]) &#123;<br><span class="hljs-comment">//                    需要將ans[i]插入有序增量子表</span><br>                    <span class="hljs-keyword">int</span> temp = ans[i];<br>                    <span class="hljs-keyword">for</span> (j = i - increment; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; ans[j]; j -= increment) &#123;<br><span class="hljs-comment">//                       數組往後移，查找插入位置</span><br>                        ans[j + increment] = ans[j];<br>                    &#125;<br>                    ans[j + increment] = temp;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (increment &gt; <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11 Container With Most Water</title>
    <link href="/seawaterfoods/2021/01/05/LeetCode-11/"/>
    <url>/seawaterfoods/2021/01/05/LeetCode-11/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/11.jpg"></p><h3 id="題目-11-Container-With-Most-Water"><a href="#題目-11-Container-With-Most-Water" class="headerlink" title="題目 11: Container With Most Water"></a>題目 11: Container With Most Water</h3><p>給定n個非負整數a1, a2, …, an，其中每個代表坐標(i, ai)上的一個點。 繪製n條垂直線，使線i的兩個端點位於 (i, ai) 和 (i, 0)。 <br/><br>找兩條線，它們與x軸一起形成一個容器，以便該容器包含最多的水。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//取最左邊的線與最右邊的線。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>,right = height.length-<span class="hljs-number">1</span>;left&lt;right;)&#123;<br>            <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> width = right-left;<br>            <br>            <span class="hljs-comment">//左右邊線相互比較後，以較小邊為高再與寬相乘得面積，之後將較小邊往對邊前進一位。</span><br>            <span class="hljs-keyword">if</span>(height[left]&gt;height[right])&#123;<br>                area = width*height[right];<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                area = width*height[left];<br>                left++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ans&lt;area)<br>                ans=area;<br>           &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/11_ContainerWithMostWater.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2 Add Two Numbers</title>
    <link href="/seawaterfoods/2021/01/04/LeetCode-2/"/>
    <url>/seawaterfoods/2021/01/04/LeetCode-2/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/2.jpg"></p><h3 id="題目-2-Add-Two-Numbers"><a href="#題目-2-Add-Two-Numbers" class="headerlink" title="題目 2: Add Two Numbers"></a>題目 2: Add Two Numbers</h3><p>此題目為兩個non-empty linked lists，它們代表兩個非負整數。<br/><br>這些數字以相反的順序儲存在兩條linked list中的nodes。<br/><br>將兩個數字相加後每一位數以相反的順序儲存在新的linked lists中返回。</p><a id="more"></a><p>EX1:如圖<br/>{2,4,3}->342 & {5,6,4}->465<br/>342+465 = 807<br/>807 -> {7,0,8}</p><p>EX2:<br/>{9,9,9,9,9,9,9}->9999999 & {9,9,9,9}->9999<br/>9999999+9999 = 10009998<br/>10009998 -> {8,9,9,9,0,0,0,1}</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode output = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        output.val = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//因為ListNode是Linked list所以必須利用java的參考(將物件的記憶體位址設定給參考名稱)refoutput將參考output</span><br>        ListNode refoutput = output;<br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//將l1&amp;l2非null的值加到refoutput值中</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>)<br>                refoutput.val += l1.val;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>)<br>                refoutput.val += l2.val;<br><br>            <span class="hljs-comment">//如果有進位，則建立值為1的下一個node</span><br>            <span class="hljs-keyword">if</span> (refoutput.val &gt;= <span class="hljs-number">10</span>) &#123;<br>                refoutput.val -= <span class="hljs-number">10</span>;<br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果沒有進位，則建立值為0的下一個node</span><br>                ListNode nextrefoutput = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>                refoutput.next = nextrefoutput;<br>            &#125;<br>            <span class="hljs-comment">//查看l1&amp;l2是否為null，若非null則將l1.next或l2.next指派到當前node</span><br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>)<br>                l1 = l1.next;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>)<br>                l2 = l2.next;<br>            <span class="hljs-comment">//如果l1&amp;l2為null且refoutput下一個node的值為0，則將refoutput下一個node設為null</span><br>            <span class="hljs-keyword">if</span> (l1 == <span class="hljs-keyword">null</span> &amp;&amp; l2 == <span class="hljs-keyword">null</span> &amp;&amp; refoutput.next.val == <span class="hljs-number">0</span>)<br>                refoutput.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">//將refoutput指派為refoutput下一個node</span><br>            refoutput = refoutput.next;<br>        &#125;<br>        <span class="hljs-comment">//因為refoutput參考output所以直接將output回傳即可。</span><br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/seawaterfoods/img/LeetCode/2_AddTwoNumbers.png"></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub，快速建立靜態Blog並且帶著到處趴趴走。</title>
    <link href="/seawaterfoods/2020/12/29/Hexo-MyConfig/"/>
    <url>/seawaterfoods/2020/12/29/Hexo-MyConfig/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/hexo-cover.png"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在剛轉職當工程師時一直想建立Blog來記錄學習的點點滴滴，但老實說對於如何設計畫面實在是沒有美感，而且還有維護更新等等問題，所以乾脆去找了許多可以快速建立Blog方法、框架，最後選擇快速又方便的Hexo+GitHub，<br>但Hexo內建的發布功能僅能單純上傳靜態網頁部分，為了方便在不同電腦更新自己Blog，在這裡分享如何設定與基本安裝方法。</p></blockquote><a id="more"></a><h3 id="安裝與建置"><a href="#安裝與建置" class="headerlink" title="安裝與建置"></a>安裝與建置</h3><blockquote><p>由於Hexo是基於Node.js開發的Blog框架，沒安裝Node.js(Node.js 版本需不低於8.10，建議使用 Node.js 10.0 及以上版本)<br>可以直接去<a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a>下載一個LTS的版本就可以了。<br><br/><br><img src="/seawaterfoods/img/nodejs.png"><br><br/><br>當然還需要有安裝<a href="https://git-scm.com/,%22Git%22">Git</a>。<br>安裝好兩個必要軟體後就可以直接使用NPM來安裝Hexo。</p></blockquote><p><strong>1. 安裝 Hexo</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></div></td></tr></table></figure><p>如果安裝完成便可以直接輸入指令來查詢Hexo版本</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo version<br></code></pre></div></td></tr></table></figure><p><strong>2. 初始化Blog</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">hexo init yourname.github.io        <span class="hljs-comment"># 初始化 blog，由於要使用到GitHub Page，所以建議命名&#x27;你的githubID&#x27;.github.io</span><br><span class="hljs-keyword">cd</span> yourname.github.io               <span class="hljs-comment"># 移動到剛創建的 blog 資料夾裡</span><br>npm install                         <span class="hljs-comment"># 安裝相關套件</span><br></code></pre></div></td></tr></table></figure><p><img src="/seawaterfoods/img/hexoinit.png"><br><strong>3. 設定_config.yml</strong></p><p>為了可以在不同電腦更新Blog所以不去使用Hexo內建的deploy功能，但為了要顯示靜態網頁部分需要額外設定一些參數，使github可以抓到靜態網頁。</p><p><img src="/seawaterfoods/img/hexo-myconfig.png"></p><p><strong>4. 設置跳轉頁面</strong></p><p>在blog資料夾中建立index.html，設置跳轉到首頁的html。<br/>也可以順便建立Blog的404頁面。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0;url=/yourname/&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/seawaterfoods/img/returnindex.png"><br><strong>5. Hexo Blog上傳GitHub</strong></p><p>建立Repositories。</p><p><img src="/seawaterfoods/img/githubpage.png"><br><br/><br>直接上傳到github。<br><br/><br><strong>PS:需配置好認證祕鑰–保證本地和遠端建立安全連線。</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git init                                                                #建立數據庫<br>git add *                                                               #把資料夾內所有檔案列為tracked對象<br>git commit -m &#x27;hexo&#x27;                                                    #提交版本<br>git remote add origin git@github.com:yourname/yourname.github.io.git    #設定遠端節點<br>git push -u origin master                                               #把本地端(master)Push到遠端(origin)<br></code></pre></div></td></tr></table></figure><p>或是使用各種GUI界面來管理版本控制內容的軟體來Push到GitHub上。</p><h3 id="在其他電腦更新Hexo-Blog"><a href="#在其他電腦更新Hexo-Blog" class="headerlink" title="在其他電腦更新Hexo Blog"></a>在其他電腦更新Hexo Blog</h3><p>在其他電腦下載好自己的Hexo Blog專案後，在專案資料夾直接安裝npm套件即可使用hexo。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install hexo-cli -g             # 安裝Hexo Command Line Interface 命令列介面。<br>npm install                         # 安裝相關套件<br></code></pre></div></td></tr></table></figure><p>PS: Node.js跟Git別忘了安裝。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>Hexo內建的發布功能只會將靜態網頁資料夾(public)上傳到github上，但為了在不同電腦中都可以上傳Blog所以稍微研究一下(汗)；<br/>其他Hexo操作像是建立新頁面之類的方法，可以參考官方網站及其他Hexo教學文，這裡把URL放在下方參考資料中。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><blockquote><p><a href="https://nodejs.org/en/," title="NodeJS">NodeJS官方網站</a><br/><br><a href="https://blackmaple.me/hexo-tutorial/," title="blackmaple">Hexo+GitHub，新手也可以快速建立部落格</a><br/><br><a href="https://markdown.tw/#autoescape," title="Markdown">Markdown文件(.md寫法)</a><br/><br><a href="https://augustushsu.github.io/2019/12/09/hexo-00/," title="augustushsu">hexo系列-00 hexo簡介＆環境安裝</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1365 How Many Numbers Are Smaller Than the Current Number</title>
    <link href="/seawaterfoods/2020/12/24/LeetCode-1365/"/>
    <url>/seawaterfoods/2020/12/24/LeetCode-1365/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1365.jpg"></p><h3 id="題目-1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number"><a href="#題目-1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number" class="headerlink" title="題目 1365: How Many Numbers Are Smaller Than the Current Number"></a>題目 1365: How Many Numbers Are Smaller Than the Current Number</h3><p>給定數組nums，在每個nums[i]找出數組中比其小的數字後記錄下來，並且以數組形式return。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] smallerNumbersThanCurrent(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-comment">//2 &lt;= nums.length &lt;= 500</span><br>        <span class="hljs-comment">//0 &lt;= nums[i] &lt;= 100</span><br>        <br>        <span class="hljs-keyword">int</span>[] cts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">101</span>];<br>        <span class="hljs-comment">//因為int[]中每個數字最多為100，所以設置一個int[101] (cts)的數組。</span><br>        <br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>                    cts[num]++;<br>                &#125;<br>        <span class="hljs-comment">//將nums中每個數依大小，將cts數組的特定位數++</span><br>        <span class="hljs-comment">//EX: if num=10,15,15,30 then cts[10]++, cts[15]++, cts[15]++, cts[30]++,</span><br>        <br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//設置sum為0</span><br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> temp = cts[i];<br>        <span class="hljs-comment">//暫存每個數組中的數，依前例， cts[10]:temp=1, cts[15]:temp=2, cts[30]:temp=1</span><br>            cts[i] = sum;<br>            <span class="hljs-comment">//將前面有的數相加。</span><br>            <span class="hljs-comment">//EX: cts[10]=0, cts[11]=1... cts[15]=1 cts[16]=1... cts[30]=4..cts[100]=4</span><br>            sum += temp;<br>            <span class="hljs-comment">//這裡將sum加上temp</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            nums[i] = cts[nums[i]];<br>             <span class="hljs-comment">//將數組nums[i]輸入數組cts[nums[i]]的數</span><br>             <span class="hljs-comment">//EX:nums[0]=10-&gt;cts[10]=0-&gt;將0指派給nums[0]-&gt;nums[0]=0</span><br>             <span class="hljs-comment">//EX:nums[1]=15-&gt;cts[15]=1-&gt;將1指派給nums[1]-&gt;nums[1]=1</span><br>             <span class="hljs-comment">//EX:nums[2]=15-&gt;cts[15]=1-&gt;將1指派給nums[2]-&gt;nums[2]=1</span><br>             <span class="hljs-comment">//EX:nums[3]=30-&gt;cts[20]=3-&gt;將3指派給nums[3]-&gt;nums[3]=3</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//ANS:[0,1,1,3]</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1290 Convert Binary Number in a Linked List to Integer</title>
    <link href="/seawaterfoods/2020/12/24/LeetCode-1290/"/>
    <url>/seawaterfoods/2020/12/24/LeetCode-1290/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/LeetCode/1290.jpg"></p><h3 id="題目-1290-Convert-Binary-Number-in-a-Linked-List-to-Integer"><a href="#題目-1290-Convert-Binary-Number-in-a-Linked-List-to-Integer" class="headerlink" title="題目 1290: Convert Binary Number in a Linked List to Integer"></a>題目 1290: Convert Binary Number in a Linked List to Integer</h3><p>此題目中每個ListNode中只會有0 or 1，這題要求出由01組成的二制進以右至左轉成十制進。</p><a id="more"></a><h3 id="以下是用while的作法"><a href="#以下是用while的作法" class="headerlink" title="以下是用while的作法"></a>以下是用while的作法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDecimalValue</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-comment">//設置decimal為最終回覆十制進的ANS</span><br>    <span class="hljs-keyword">int</span> decimal = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//於reverse將head的ListNode轉製成由後至前的節點EX:將[1,0,0]-&gt;[0,0,1]</span><br>    head = reverse(head);<br>    <br>    <span class="hljs-comment">//設置index為2的次方數</span><br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//使用while迴圈來判斷當前head中是否為null</span><br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">//將2^index*當前node的val取值加至decimal</span><br>        decimal += (Math.pow(<span class="hljs-number">2</span>, index) * head.val);<br>        <span class="hljs-comment">//讓head推至下一個node</span><br>        head = head.next;<br>        index ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> decimal;<br>&#125;<br><span class="hljs-comment">//reverse的轉製方式</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br><span class="hljs-comment">//前一個Node</span><br>        ListNode prev = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">//當前Node</span><br>        ListNode cur = head;<br><span class="hljs-comment">//下一個Node</span><br>        ListNode next = <span class="hljs-keyword">null</span>;<br>        <br><span class="hljs-comment">//判斷當前Node是否為空</span><br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">//將cur.next置入next中</span><br>            next = cur.next;<br>            <br><span class="hljs-comment">//將prev置入cur.next</span><br>            cur.next = prev;<br>            <br><span class="hljs-comment">//將cur置入prev</span><br>            prev = cur;<br><br><span class="hljs-comment">//將next置入cur</span><br>            cur = next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="以下是用遞迴的作法"><a href="#以下是用遞迴的作法" class="headerlink" title="以下是用遞迴的作法"></a>以下是用遞迴的作法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans =<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDecimalValue</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head.next!=<span class="hljs-keyword">null</span>)&#123;<br>            getDecimalValue(head.next);<br>        &#125;<br>        ans += head.val*Math.pow(<span class="hljs-number">2</span>,i);<br>        i++;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java:toString小技巧</title>
    <link href="/seawaterfoods/2020/12/23/Java-toString/"/>
    <url>/seawaterfoods/2020/12/23/Java-toString/</url>
    
    <content type="html"><![CDATA[<p><img src="/seawaterfoods/img/tips.jpg"><br>在開發Java專案時，時常會有需要查看撈出來的資料是否正確，但因為各種原因無法在class中實作或是需要常常更新toString，這時候就可以使用匿名內部類別（Anonymous inner class）直接重新定義類別的toString，方便在console中印出。</p><a id="more"></a><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> level;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> blood;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBlood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> blood;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBlood</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blood)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.blood = blood;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLevel</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> level;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLevel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> level)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwordsMan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Role</span> </span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RPGTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SwordsMan swordsMan = <span class="hljs-keyword">new</span> SwordsMan()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>                String toString = <span class="hljs-string">&quot;Name : &quot;</span>+getName()+<span class="hljs-string">&quot;; Level : &quot;</span>+getLevel()+<span class="hljs-string">&quot;; Blood : &quot;</span>+getBlood();<br>             <span class="hljs-keyword">return</span> toString;<br>            &#125;<br>        &#125;;<br>        swordsMan.setName(<span class="hljs-string">&quot;Justin&quot;</span>);<br>        swordsMan.setLevel(<span class="hljs-number">1</span>);<br>        swordsMan.setBlood(<span class="hljs-number">200</span>);<br><br>        Magician magician = <span class="hljs-keyword">new</span> Magician();<br>        magician.setName(<span class="hljs-string">&quot;Monica&quot;</span>);<br>        magician.setLevel(<span class="hljs-number">1</span>);<br>        magician.setBlood(<span class="hljs-number">100</span>);<br><br>        System.out.println(swordsMan);<br>        System.out.println(magician);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-attribute">Name </span>: Justin; <span class="hljs-attribute">Level </span>: <span class="hljs-number">1</span>; <span class="hljs-attribute">Blood </span>: <span class="hljs-number">200</span><br>com.joe.basic.anonymous.entry.Magician<span class="hljs-variable">@4edde6e5</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
